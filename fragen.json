[
  {
    "frage": "Was ist Qualität?<br><br>Wählen Sie genau EINE Option aus.",
    "antworten": {
      "a": "Aktivitäten, die darauf fokussieren, Vertrauen in die Erfüllung der Qualitätsanforderungen zu erzeugen",
      "b": "Der Grad, zu dem eine Komponente oder ein System die expliziten und impliziten Bedürfnisse seiner verschiedenen Stakeholder erfüllt",
      "c": "Der Grad, zu dem eine Komponente oder ein System Informationen und Daten schützt, so dass Personen oder andere Komponenten oder Systeme nur einen solchen Grad an Zugriff erhalten, der ihrer Berechtigungsart und -stufe entspricht",
      "d": "Die gesamten Kosten, die durch Qualitätssicherungsaktivitäten und durch Fehlerwirkungen entstehen. Sie werden oft in Kosten der Fehlervorbeugung, der Kosten der Fehlerermittlung, der internen Fehlerwirkungen und den externen Fehlerwirkungen aufgeteilt"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Das ist die Glossardefinition von Qualitätssicherung.",
      "b": "KORREKT – Das ist die Glossardefinition von Qualität.",
      "c": "FALSCH – Das ist die Glossardefinition von IT-Sicherheit.",
      "d": "FALSCH – Das ist die Glossardefinition von Qualitätskosten."
    }
  },

  {
    "frage": "Welcher der folgenden Punkte ist ein typisches Testziel?<br>Wählen Sie genau EINE Option aus.",
    "antworten": {
      "a": "Verhindern von Fehlerzuständen",
      "b": "Fehlerzustände reparieren",
      "c": "Vergleich der tatsächlichen Ergebnisse mit den erwarteten Ergebnissen",
      "d": "Analysieren der Fehlerursache"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Dies ist ein (im Lehrplan) aufgeführtes Ziel.",
      "b": "FALSCH – Dies ist Debugging.",
      "c": "FALSCH – Dies ist eine Aktivität innerhalb der Testausführung innerhalb des Testprozesses.",
      "d": "FALSCH – Dies ist Teil der Fehlersuche"
    }
  },

  {
    "frage": "Ein Telefonklingeln lenkt einen Programmierer kurzzeitig ab, was dazu führt, dass der Programmierer die Logik, die die obere Grenze einer Eingangsvariablen prüft, nicht korrekt programmiert. Später, während des Systemtests, stellt ein Tester fest, dass dieses Eingabefeld ungültige Eingabewerte annimmt. Die unsachgemäß kodierte Logik für die Prüfung der oberen Grenze bezeichnet man als:<br><br>Wählen Sie genau EINE Option aus.",
    "antworten": {
      "a": "Grundursache",
      "b": "Fehlerwirkung",
      "c": "Fehlhandlung",
      "d": "Fehlerzustand"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Die Grundursache ist die Ablenkung, die der Programmierer beim Programmieren erfahren hat.",
      "b": "FALSCH – Das Akzeptieren von ungültigen Eingängen ist die Fehlerwirkung.",
      "c": "FALSCH – Die Fehlhandlung ist der Denkfehler, der dazu geführt hat, dass der Fehler in den Code eingebaut wurde.",
      "d": "KORREKT – Das Problem im Code ist ein Fehlerzustand."
    }
  },

  {
    "frage": "Ein Product Owner sagt, dass Ihre Rolle als Tester in einem agilen Team darin besteht, alle Fehlerzustände vor dem Ende jeder Iteration aufzudecken.<br>Welches der folgenden Aussagen ist ein Testprinzip, das als Antwort auf diese (falsche) Aussage verwendet werden könnte?<br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Häufung von Fehlerzuständen",
      "b": "Testen zeigt die Anwesenheit von Fehlerzuständen",
      "c": "Trugschluss: “Keine Fehler” bedeutet ein brauchbares System",
      "d": "Analyse der Grundursache"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Die Fehlerhäufung hat damit zu tun, wo Fehlerzustände (Defekte) am wahrscheinlichsten zu finden sind, nicht, ob alle gefunden werden können",
      "b": "KORREKT – Testen kann das Vorhandensein von Fehlern zeigen, aber nicht deren Abwesenheit beweisen, was es unmöglich macht, zu wissen, ob Sie alle Bugs erwischt haben. Außerdem macht es die Unmöglichkeit des vollständigen Testens für Sie unmöglich, alle Fehlerzustände zu erwischen",
      "c": "FALSCH – Dieses Prinzip besagt, dass Sie viele Fehler finden und beseitigen können, aber trotzdem ein erfolgloses Software-Produkt veröffentlichen können, was nicht das ist, was der Product Owner von Ihnen verlangt",
      "d": "FALSCH – Die Grundursachenanalyse ist kein Testprinzip"
    }
  },

  {
    "frage": "Programmierer schreiben oft Komponententests und führen diese gegen den von ihnen geschriebenen Code aus.<br> Welche der folgenden Denkweisen eines Testers sollten Programmierer während dieser Selbsttest-Aktivität einnehmen, um diese Komponententests effektiv durchzuführen?<br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Gute Kommunikationsfähigkeiten",
      "b": "Codeüberdeckung",
      "c": "Bewertung von Fehlern im Code",
      "d": "Detailgenauigkeit"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Der Programmierer scheint Komponententests an seinem eigenen Code durchzuführen",
      "b": "FALSCH – Codeüberdeckung ist nützlich für Komponententests, aber es ist keine Tester-Denkweise",
      "c": "FALSCH – Die Denkweise des Programmierers beinhaltet die Überlegung, was mit dem Code falsch sein könnte, aber das ist nicht die Denkweise eines Testers",
      "d": "KORREKT – Diese Denkweise des Testers, die Detailgenauigkeit, hilft den Programmierern, Fehler während der Komponententests zu finden"
    }
  },

  {
    "frage": "Beachten Sie die folgenden Testaktivitäten:<br><ol><li>Auswählen von Regressionstests</li><li>Bewertung der Vollständigkeit der Testdurchführung</li><li>Identifizieren, welche User Stories offene Fehlerberichte haben</li><li>Bewertung, ob die Anzahl der Tests für jede Anforderung mit dem Grad des Produktrisikos vereinbar ist</li></ol><br>Betrachten Sie die folgenden Möglichkeiten, wie die Verfolgbarkeit beim Testen helfen kann:<br><ol style=\"list-style-type: upper-alpha;\"><li>Verbessern der Verständlichkeit von Teststatusberichten, um den Status der Elemente der Testbasis einzubeziehen</li><li>Testaktivitäten nachvollziehbarer/prüfbarer machen</li><li>Bereitstellung von Informationen zur Beurteilung der Prozessqualität</li><li>Analysieren der Auswirkungen von Änderungen</li></ol><br>Welche der folgenden Aussagen passt am besten zur aufgeführten Testaktivität und wie kann \"die Verfolgbarkeit\" diese Aktivität jeweils unterstützen?<br><br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "1D, 2B, 3C, 4A",
      "b": "1B, 2D, 3A, 4C",
      "c": "1D, 2C, 3A, 4B",
      "d": "1D, 2B, 3A, 4C"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "KORREKT - Begründung:<br>Verfolgbarkeit (syn. Rückverfolgbarkeit, eng. traceability) hilft bei:<ol style=\"list-style-type: circle;\"><li>Auswahl von Regressionstests im Hinblick auf die Analyse der Auswirkungen von Änderungen (1D)</li><li>Bewertung der Vollständigkeit der Testausführung, die das Testen nachvollziehbarer macht (2B)</li><li>Identifizieren, welche User-Stories offene Fehlerberichte haben, was die Verständlichkeit von Teststatusberichten verbessert, um den Status von Testbasis Elementen (3A) einzubeziehen</li><li>Bewertung, ob die Anzahl der Tests für jede Anforderung mit dem Grad des Produktrisikos übereinstimmt, was Informationen zur Bewertung der Testprozessqualität liefert, d. h. Ausrichtung des Testaufwands am Risiko (4C)<br>Daher ist die Option d) KORREKT."
    }
  },

  {
    "frage": "Ein Tester nahm an einer Diskussion über die vorgeschlagene Datenbankstruktur teil. Der Tester identifizierte ein potenzielles Performanzproblem im Zusammenhang mit bestimmten häufigen Anfragen des Benutzers. Dieses mögliche Problem wurde dem Entwicklungsteam erläutert.<br><br>Welcher der folgenden Punkte ist ein Beitrag des Testens zum Erfolg, der am BESTEN zu dieser Situation passt?<br><br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Ermöglicht die frühzeitige Erkennung von erforderlichen Tests",
      "b": "Sicherstellen, dass Prozesse ordnungsgemäß durchgeführt werden",
      "c": "Verringerung des Risikos grundlegender Entwurfsfehler",
      "d": "Verringerung des Risikos nicht testbarer Funktionalität"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH - Das frühzeitige Erkennen von erforderlichen Tests ist zwar wichtig, jedoch nicht der beste Beitrag des Testens zu dieser Situation.",
      "b": "FALSCH - Die Sicherstellung ordnungsgemäßer Prozessdurchführung gehört eher zur Qualitätssicherung als zum Beitrag des Testens in dieser Situation.",
      "c": "KORREKT - Die Verringerung des Risikos grundlegender Entwurfsfehler ist der beste Beitrag des Testens zu dieser Situation, da die Datenbankstruktur eng mit dem Design verbunden ist und Performanzprobleme ein erhebliches Produktrisiko darstellen können.",
      "d": "FALSCH - Die Verringerung des Risikos nicht testbarer Funktionalität ist zwar wichtig, jedoch nicht der beste Beitrag des Testens zu dieser Situation, da der Tester hier ein potenzielles Performanzproblem identifiziert hat, das nichts mit nicht testbarer Funktionalität zu tun hat."
    }
  },

  {
    "frage": "Welcher der folgenden Punkte ist ein Beispiel für eine Aufgabe, die im Rahmen des Testprozesses durchgeführt werden kann?<br><br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Analysieren eines Fehlerzustands",
      "b": "Entwerfen von Testdaten",
      "c": "Einem Testobjekt eine Version zuordnen",
      "d": "Schreiben einer User Story"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH - Das Analysieren eines Fehlerzustands ist eher Teil des Debuggings als des Testens.",
      "b": "KORREKT - Das Entwerfen von Testdaten ist eine typische Aufgabe im Rahmen des Testprozesses, da es für die Testimplementierung wichtig ist, geeignete Testdaten zu erstellen.",
      "c": "FALSCH - Die Zuordnung von Testobjektversionen ist in der Regel Teil des Konfigurationsmanagements und nicht speziell eine Aufgabe im Testprozess.",
      "d": "FALSCH - Das Schreiben einer User Story ist keine direkte Testaktivität und fällt normalerweise in den Verantwortungsbereich des Product Owners."
    }
  },

  {
    "frage": "Sie führen einen Performanztest mit dem Ziel durch, mögliche Netzwerkengpässe in Schnittstellen zwischen Komponenten eines Systems zu finden. Welche der folgenden Aussagen beschreibt diesen Test?<br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Ein funktionaler Test während der Integrationsteststufe",
      "b": "Ein nicht-funktionaler Test während der Integrationsteststufe",
      "c": "Ein funktionaler Test während der Komponententeststufe",
      "d": "Ein nicht-funktionaler Test während der Komponententeststufe"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH - Dieser Test entspricht zwar der Beschreibung eines Integrationstests, ist aber ein nicht-funktionaler Test.",
      "b": "KORREKT - Dieser Test entspricht der Beschreibung eines Integrationstests und es handelt sich um einen nicht-funktionalen Test.",
      "c": "FALSCH - Dieser Test entspricht nicht der Beschreibung eines Komponententests und es handelt sich nicht um einen funktionalen Test.",
      "d": "FALSCH - Obwohl dieser Test ein nicht-funktionaler Test ist, entspricht er nicht der Beschreibung eines Komponententests."
    }
  },

  {
    "frage": "Welche der folgenden Aussagen ist zutreffend?<br><br>Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Die Auswirkungsanalyse ist nützlich für Fehlernachtests während der Wartungstests",
      "b": "Fehlernachtests sind nützlich für Regressionstests während des Systementwurfs",
      "c": "Die Auswirkungsanalyse ist nützlich für Regressionstests während der Wartungstests",
      "d": "Die Fehlernachtests sind nützlich für die Auswirkungsanalyse während der Wartungstests"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH - Während die Auswirkungsanalyse während der Wartungstests nützlich ist, ist sie für Fehlernachtests nicht notwendig, da sich Fehlernachtests auf die beabsichtigten Auswirkungen einer Fehlerbehebung oder einer anderen Änderung beziehen.",
      "b": "FALSCH - Fehlernach- und Regressionstests sind zwei separate Aktivitäten, und Fehlernachtests sind nicht Teil des Systementwurfs.",
      "c": "KORREKT - Die Auswirkungsanalyse kann verwendet werden, um Regressionstests für Wartungstests auszuwählen.",
      "d": "FALSCH - Fehlernachtests sind nicht Teil der Auswirkungsanalyse, obwohl Fehlernachtests typischerweise während der Wartungstests durchgeführt werden."
    }
  },

  {
    "frage": "Betrachten Sie die folgenden Arten von Fehlern, auf die sich eine Teststufe konzentrieren könnte: 1. Fehlerzustände in separat testbaren Modulen oder Objekten 2. Nicht auf die Identifizierung von Fehlerzuständen ausgerichtet 3. Fehlerzustände an Schnittstellen und Wechselwirkungen 4. Fehlerzustände im gesamten Testobjekt Welche der folgenden Listen stimmt mit den Teststufen aus dem Foundation Lehrplan und den oben angegebenen Fehlerschwerpunkten überein?",
    "antworten": {
      "a": "1 = Performanztest; 2 = Komponententest; 3 = Systemtest; 4 = Abnahmetest",
      "b": "1 = Komponententest; 2 = Abnahmetest; 3 = Systemtest; 4 = Integrationstest",
      "c": "1 = Komponententest; 2 = Abnahmetest; 3 = Integrationstest; 4 = Systemtest",
      "d": "1 = Integrationstest; 2 = Systemtest; 3 = Komponententest; 4 = Abnahmetest"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "KORREKT",
      "d": "FALSCH"
    },
    "begruendung": {
      "a": "Performanztests sind keine Teststufe, und die Zuordnung der anderen Tests zu den Fehlerarten ist inkorrekt.",
      "b": "Die Zuordnung der Teststufen zu den Fehlerarten ist inkorrekt.",
      "c": "Die Zuordnung von Komponententests zu separat testbaren Modulen, Abnahmetests zur Nicht-Identifizierung von Fehlerzuständen, Integrationstests zu Schnittstellen und Wechselwirkungen und Systemtests zum gesamten Testobjekt ist korrekt.",
      "d": "Die Zuordnung der Teststufen zu den Fehlerarten ist inkorrekt."
    }
  },
  {
    "frage": "Ein Betriebssystem-Softwareprodukt für den Massenmarkt ist so konzipiert, dass es auf jeder PC-Hardware mit einem Prozessor der x86-Familie läuft. Sie führen eine Reihe von Tests durch, um nach Fehlerzuständen im Zusammenhang mit der Unterstützung der verschiedenen PCs zu suchen, die einen solchen Prozessor verwenden, und um Vertrauen zu schaffen, dass wichtige PC-Marken funktionieren. Welche Art von Test führen Sie durch?",
    "antworten": {
      "a": "Performanztest",
      "b": "Prozessortest",
      "c": "Funktionaler Test",
      "d": "Übertragbarkeitstest"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "KORREKT"
    },
    "begruendung": {
      "a": "Der beschriebene Test ist ein nicht-funktionaler Test, speziell ein Übertragbarkeitstest, und kein Performanztest.",
      "b": "Prozessortest ist keine definierte Testart und beschreibt nicht die Art von Test, der durchgeführt wird.",
      "c": "Der beschriebene Test ist ein nicht-funktionaler Test, speziell ein Übertragbarkeitstest, und kein funktionaler Test.",
      "d": "Das Testen unterstützter Geräte, um sicherzustellen, dass das Betriebssystem auf verschiedenen PCs mit x86-Prozessoren läuft, ist ein nicht-funktionaler Test, nämlich ein Übertragbarkeitstest."
    }
  },
  {
    "frage": "Während einer agilen Entwicklungsarbeit entdeckt ein Product Owner eine bisher unbekannte regulatorische Anforderung, die für die meisten User Stories innerhalb eines bestimmten Epics gilt. Die User Stories werden aktualisiert, um die notwendigen Änderungen im Softwareverhalten vorzusehen. Die Programmierer im Team modifizieren den Code entsprechend. Welche Arten von Tests werden Sie als Tester im Team durchführen?",
    "antworten": {
      "a": "Fehlernachtests",
      "b": "Regressionstests",
      "c": "Funktionale Tests",
      "d": "Änderungsbezogene Tests"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "KORREKT"
    },
    "begruendung": {
      "a": "Die beschriebene Situation erfordert nicht nur das Aufspüren von Fehlern, sondern auch das Testen der neuen Änderungen. Daher sind Änderungsbezogene Tests angemessener als Fehlernachtests.",
      "b": "Regressionstests sind Teil der Änderungsbezogenen Tests, da sie sicherstellen sollen, dass die vorhandene Funktionalität nach den Änderungen weiterhin korrekt funktioniert. Sie sind jedoch nicht die einzigen Tests, die durchgeführt werden müssen.",
      "c": "Funktionale Tests sind möglicherweise Teil der Änderungsbezogenen Tests, um sicherzustellen, dass die neuen Anforderungen korrekt umgesetzt wurden. Jedoch beziehen sich Änderungsbezogene Tests auf alle Arten von Tests, die nach einer Änderung durchgeführt werden müssen, nicht nur auf Funktionale Tests.",
      "d": "Die Änderung im Verhalten kann entweder funktional oder nicht-funktional sein. Sie müssen änderungsbezogene Tests durchführen, von denen einige Fehlernachtests und andere Regressionstests sind."
    }
  },
  {
    "frage": "Wie lautet die Bezeichnung der Rolle eines Teilnehmers, der eine Inspektionssitzung bei einer formellen Überprüfung leitet?",
    "antworten": {
      "a": "Moderator",
      "b": "Programmierer",
      "c": "Autor",
      "d": "Projektleiter"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "FALSCH"
    },
    "begruendung": {
      "a": "Der Moderator leitet die Überprüfungssitzungen und ist verantwortlich für den Ablauf und die Einhaltung des Prozesses.",
      "b": "Die Rolle des Programmierers ist nicht die eines Leiters einer Inspektionssitzung bei einer formalen Überprüfung.",
      "c": "Der Autor ist normalerweise die Person, die den zu überprüfenden Artikel geschrieben hat und nicht zwangsläufig der Leiter der Inspektionssitzung.",
      "d": "Der Projektleiter ist nicht speziell dafür zuständig, eine Inspektionssitzung zu leiten."
    }
  },
  {
    "frage": "Sie lesen eine User Story im Product Backlog, um sich auf ein Meeting mit dem Product Owner und einem Entwickler vorzubereiten und notieren dabei mögliche Fehler. Welche der folgenden Aussagen zu dieser Aktivität ist zutreffend?",
    "antworten": {
      "a": "Es handelt sich nicht um einen statischen Test, denn beim statischen Test wird das Testobjekt ausgeführt",
      "b": "Es handelt sich nicht um einen statischen Test, denn statische Tests werden immer mit einem Werkzeug durchgeführt",
      "c": "Es handelt sich um einen statischen Test, denn alle Fehler, die Sie finden, könnten beim dynamischen Test günstiger gefunden werden",
      "d": "Es handelt sich um einen statischen Test, da bei statischen Tests das Testobjekt nicht ausgeführt wird"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "KORREKT"
    },
    "begruendung": {
      "a": "Beim statischen Testen wird das Testobjekt nicht ausgeführt, es wird lediglich geprüft, ohne dass der Code ausgeführt wird.",
      "b": "Statische Tests können auch manuell durchgeführt werden, ohne dass unbedingt ein Werkzeug erforderlich ist.",
      "c": "Die Kosteneffizienz von Fehlerbehebungen hängt nicht unbedingt davon ab, ob sie in statischen oder dynamischen Tests gefunden werden, sondern von der Phase, in der sie gefunden und behoben werden.",
      "d": "Beim statischen Testen wird das Testobjekt nicht ausgeführt, sondern es werden Artefakte wie Code, Dokumente oder User Stories überprüft."
    }
  },
  {
    "frage": "Während einer Phase intensiver Projektüberstunden wird ein Systemarchitekturdokument an verschiedene Projektteilnehmer gesendet, in dem ein zuvor nicht geplantes technisches Review in einer Woche angekündigt wird. Es werden keine Anpassungen an der Liste der zugewiesenen Aufgaben der Teilnehmer vorgenommen. Welcher der folgenden Erfolgsfaktoren für Reviews fehlt allein aufgrund dieser Information?",
    "antworten": {
      "a": "Geeignete Review-Art",
      "b": "Ausreichend Zeit zur Vorbereitung",
      "c": "Ausreichende Metriken zur Bewertung des Autors",
      "d": "Gut geleitete Review-Sitzung"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH",
      "b": "KORREKT",
      "c": "FALSCH",
      "d": "FALSCH"
    },
    "begruendung": {
      "a": "Technische Reviews sind für technische Dokumente wie Systemarchitektur geeignet, daher ist die Auswahl der Review-Art angemessen.",
      "b": "In diesem Szenario fehlt es an ausreichender Zeit für die Vorbereitung, da das technische Review innerhalb einer Woche angekündigt wird und keine Anpassungen an der Arbeitsliste der Teilnehmer vorgenommen wurden. Dies kann die Qualität des Reviews beeinträchtigen.",
      "c": "Das Fehlen ausreichender Metriken zur Bewertung des Autors ist nicht der Hauptgrund für den Mangel an Erfolgsfaktoren in diesem Szenario.",
      "d": "Eine gut geleitete Review-Sitzung ist wichtig, aber es gibt keinen spezifischen Hinweis darauf, dass die Sitzung nicht gut geleitet wird."
    }
  },
  {
    "frage": "Sie arbeiten als Tester in einem agilen Team und haben zu Beginn jeder Iteration an über zwei Dutzend User-Story-Verfeinerungssessions mit dem Product Owner und den Entwicklern im Team teilgenommen. Da die Reviews bei der Erkennung von Fehlerzuständen in User Stories immer effektiver und der Product Owner bei der Korrektur dieser Fehlerzustände immer geschickter geworden sind, stellen Sie und das Team fest, dass die Geschwindigkeit des Teams, wie in Ihren Burndown-Charts dargestellt, zu steigen beginnt. Welcher der folgenden Vorteile des statischen Testens bezieht sich am DIREKTESTEN auf die erhöhte Geschwindigkeit des Teams?",
    "antworten": {
      "a": "Steigende Gesamtkosten der Qualität",
      "b": "Reduzierung der Testkosten",
      "c": "Steigerung der Entwicklungsproduktivität",
      "d": "Reduzierung der Gesamtkosten für Qualität"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "KORREKT",
      "d": "FALSCH"
    },
    "begruendung": {
      "a": "Reviews reduzieren die Gesamtkosten der Qualität, anstatt sie zu steigern.",
      "b": "Die gesteigerte Geschwindigkeit ist ein Indikator für die gesteigerte Entwicklungsproduktivität, die nicht direkt mit Testkostenreduktion in Verbindung steht.",
      "c": "Die gesteigerte Entwicklungsproduktivität, die durch effektivere Reviews und Korrekturen von Fehlerzuständen erreicht wird, führt dazu, dass das Team schneller arbeitet und mehr Arbeit in jeder Iteration erledigt, was sich in einer höheren Geschwindigkeit des Teams niederschlägt.",
      "d": "Dieser Vorteil ist nicht direkt mit der gesteigerten Geschwindigkeit des Teams verbunden."
    }
  },
  {
    "frage": "Sie arbeiten an einem Entwicklungsprojekt für ein Videospiel, das mit agilen Methoden entwickelt wird. Es basiert auf der griechischen Mythologie und Geschichte, und die Spieler können Schlüsselrollen in Szenarien wie den Schlachten zwischen Griechen und Trojanern übernehmen. Betrachten Sie die folgende User-Story und die zugehörigen Akzeptanzkriterien: Als Spieler möchte ich in der Lage sein, den Stab des Midas (ein neues magisches Objekt) zu erwerben, damit ich Objekte und andere Spieler in Gold verwandeln kann. AC1: Der Stab muss auf jedes Objekt oder jeden Spieler – egal welcher Größe – wirken, das von dem Spieler, der den Stab hält, irgendwo berührt werden kann. AC2: Das Halten des Stabes verwandelt den Spieler, der ihn hält, nicht in Gold. AC3: Jeder Gegenstand oder Spieler, der vom Stab berührt wird, verwandelt sich innerhalb einer Millisekunde vollständig in Gold. AC4: Der Stab erscheint wie in Prototyp O.W.RoM gezeigt. AC5: Die Transformation beginnt an der Kontaktstelle mit dem Stab und bewegt sich mit einer Geschwindigkeit von einem Meter pro Millisekunde. Sie nehmen an einer checklistenbasierten Reviewsitzung zu dieser User Story teil. Diese User-Story und die zugehörigen Akzeptanzkriterien enthalten welche der folgenden typischen Fehler, die durch statische Tests bei dieser Art von Arbeitsprodukt identifiziert werden können? Wählen Sie EINE Option aus.",
    "antworten": {
      "a": "Abweichung von Normen",
      "b": "Widersprüche",
      "c": "Sicherheitslücke",
      "d": "Überdeckungslücken"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Während die Abweichung von Standards typisch ist, wird uns kein Standard vorgegeben, dem die User Stories entsprechen sollen",
      "b": "KORREKT – Widerspruch (Inkonsistenz) ist ein typischer Anforderungsfehler. AC3 und AC5 widersprechen sich, wenn der Stab ein Objekt berührt, das sich mehr als 1 Meter in jede Richtung vom Berührungspunkt aus erstreckt, da AC1 die Größe der zu berührenden Objekte nicht begrenzt",
      "c": "FALSCH – Während Sicherheitslücken typische Fehler sind, gibt es hier nichts, was mit Sicherheit zu tun hat",
      "d": "FALSCH – Obwohl (Test-)Überdeckungslücken typische Fehler sind, einschließlich fehlender Tests für Abnahmekriterien, erhalten wir keine Informationen darüber, welche Tests vorhanden sind und welche nicht"
    }
  },
  {
    "frage": "Was ist Entscheidungsüberdeckung?",
    "antworten": {
      "a": "Die Überdeckung der Bedingungsergebnisse",
      "b": "Entscheidungsüberdeckung ist ein Synonym für Anweisungsüberdeckung",
      "c": "Die Überdeckung von ausführbaren Anweisungen",
      "d": "Die Überdeckung von Entscheidungsergebnissen"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Dies ist die Glossardefinition von Bedingungsüberdeckung",
      "b": "FALSCH – Die Entscheidungsüberdeckung ist eine höhere Ebene der Überdeckung und die beiden Begriffe sind im Glossar nicht als Synonyme definiert",
      "c": "FALSCH – Das ist die Glossar-Definition von Anweisungsüberdeckung",
      "d": "KORREKT – Dies ist die Glossar-Definition des Begriffs Entscheidungsüberdeckung, der auf Entscheidungen angewendet wird"
    }
  },
  {
    "frage": "Im Vorfeld einer Iterationsplanungssitzung untersuchen Sie eine User Story und deren Akzeptanzkriterien und leiten daraus Testbedingungen und zugehörige Testfälle ab, um das Prinzip der frühen Qualitätssicherung und des Tests anzuwenden. Welches Testverfahren wenden Sie an?",
    "antworten": {
      "a": "White-Box",
      "b": "Black-Box",
      "c": "Erfahrungsbasiert",
      "d": "Intuitiv"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Strukturbasierte oder White-Box-Verfahren basieren auf einer Analyse der Architektur, des detaillierten Designs, der internen Struktur oder des Codes des Testobjekts",
      "b": "KORREKT – Black-Box-Testverfahren basieren auf einer Analyse der entsprechenden Testbasis (z. B. formale Anforderungsdokumente, Spezifikationen, Anwendungsfälle, User Stories oder Geschäftsprozesse), die funktionales und nicht-funktionales Verhalten beschreiben",
      "c": "FALSCH – Erfahrungsbasierte Techniken nutzen die Erfahrung von Entwicklern, Testern und Benutzern, um zu bestimmen, was getestet werden soll",
      "d": "FALSCH – Intuitive Testfallermittlung ist eine Art von erfahrungsbasiertem Testen, dass kein Blackbox-Test ist"
    }
  },
  {
    "frage": "Welche der folgenden Aussagen über exploratives Testen ist zutreffend?",
    "antworten": {
      "a": "Erfahrene Tester, die ähnliche Anwendungen und Technologien getestet haben, schneiden bei explorativen Tests wahrscheinlich besser ab als weniger erfahrene Tester",
      "b": "Beim explorativen Testen werden keine zusätzlichen Tests identifiziert, die über diejenigen hinausgehen, die sich aus formalen Testverfahren ergeben würden",
      "c": "Die Zeit, die für eine explorative Testsitzung benötigt wird, lässt sich nicht im Voraus vorhersagen",
      "d": "Exploratives Testen kann den Einsatz von Black-Box-Techniken beinhalten, aber nicht von White-Box-Techniken"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Exploratives Testen ist eine Form des erfahrungsbasierten Testens, das von den Fähigkeiten und der Erfahrung des Testers profitiert",
      "b": "FALSCH – Exploratives Testen ist nützlich, um formale Testverfahren zu ergänzen",
      "c": "FALSCH – Beim sitzungsbasierten Testmanagement werden explorative Tests innerhalb eines definierten Zeitrahmens durchgeführt, und der Tester verwendet eine Test-Charta, die Testziele enthält, um das Testen anzuleiten",
      "d": "FALSCH – Exploratives Testen kann die Verwendung anderer Black-Box-, White-Box und erfahrungsbasierter Techniken beinhalten, die in diesem Lehrplan genannt werden"
    }
  },
  {
    "frage": "Sie testen eine mobile App, mit der Kunden auf ihre Bankkonten zugreifen und diese verwalten können. Sie führen eine Testsuite aus, die die Bewertung jedes Bildschirms und jedes Feldes auf jedem Bildschirm anhand einer allgemeinen Liste von Best Practices für Benutzeroberflächen umfasst. Sie wurde aus einem populären Buch zu diesem Thema abgeleitet und soll die Attraktivität, Benutzerfreundlichkeit und Zugänglichkeit für solche Apps maximieren. Welche der folgenden Optionen kategorisiert das von Ihnen verwendete Testverfahren am BESTEN?",
    "antworten": {
      "a": "Spezifikationsbasiert",
      "b": "Explorativ",
      "c": "Checklistenbasiert",
      "d": "Intuitiv"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Das Buch bietet einen allgemeinen Leitfaden und ist kein formales Anforderungsdokument, keine Spezifikation oder eine Sammlung von Anwendungsfällen, User Stories oder Geschäftsprozessen",
      "b": "FALSCH – Während Sie die Liste als eine Reihe von Test-Chartas betrachten könnten, ähnelt sie eher der Liste von Testbedingungen",
      "c": "KORREKT – Die Liste der Best Practices für die Benutzeroberfläche ist die Liste der Testbedingungen",
      "d": "FALSCH – Die Tests konzentrieren sich nicht auf Fehler, die auftreten könnten, sondern auf die Erkenntnis, was für den Benutzer wichtig ist, im Sinne der Leichtigkeit der Nutzung (Benutzerfreundlichkeit)."
    }
  },
  {
    "frage": "Betrachten Sie eine mobile App, mit der Kunden auf ihre Bankkonten zugreifen und diese verwalten können. Es wurde gerade eine User Story zu den Funktionen hinzugefügt, die die Social-Media-Konten und Bankdaten der Kunden überprüft, um personalisierte Grüße zu Geburtstagen und anderen persönlichen Jahrestagen zu übermitteln. Welche der folgenden Testverfahren könnte ein PROGRAMMIERER während eines Komponententests des Codes verwenden, um sicherzustellen, dass Situationen abgedeckt werden, in denen die Grüße auftreten SOLLEN und in denen die Grüße NICHT auftreten SOLLEN?",
    "antworten": {
      "a": "Anweisungstest",
      "b": "Exploratives Testen",
      "c": "Zustandsübergangstest",
      "d": "Entscheidungstest"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Anweisungstests führen die Anweisungen im Code aus, was dazu führen kann, dass bestimmte Ansagen bezogen auf Jahrestage nicht getestet werden",
      "b": "FALSCH – Wenn in der Test-Charta nicht ausdrücklich erwähnt wird, dass sowohl das Vorhandensein als auch das Nichtvorhandensein jeder Art von Begrüßung getestet wird, kann die Abdeckung für einen explorativen Test schwer zu beurteilen sein",
      "c": "FALSCH – Das Testen von Zustandsübergängen ist nützlich für Situationen, in denen das Testobjekt abhängig von aktuellen Bedingungen oder der Vorgeschichte unterschiedlich auf eine Eingabe reagiert. In diesem Fall muss das Testobjekt jedoch entscheiden, ob das aktuelle Datum mit einem bestimmten Meilenstein übereinstimmt und somit die entsprechende Ansage angezeigt werden soll",
      "d": "KORREKT – Entscheidungstests beinhalten Testfälle, die den Kontrollflüssen folgen, die von einem Entscheidungspunkt ausgehen, was in diesem Fall die Entscheidung wäre, ob eine Ansage bezogen auf einen Jahrestag gemacht werden soll oder nicht"
    }
  },
  {
    "frage": "Eine Batch-Anwendung ist seit über zwei Jahren unverändert in Produktion. Sie läuft einmal im Monat über Nacht, um Auszüge zu erstellen, die per E-Mail an die Kunden gesendet werden. Für jeden Kunden geht die Anwendung durch jedes Konto und listet jede Transaktion auf diesem Konto im letzten Monat auf. Sie verwendet eine verschachtelte Schleifenstruktur, um Kunden (äußere Schleife), die Konten jedes Kunden (mittlere Schleife) und die Transaktionen jedes Kontos (innere Schleife) zu verarbeiten. In einer Nacht bricht die Batch-Anwendung vorzeitig ab und versäumt es, Auszüge per E-Mail an einige Kunden zu senden, wenn sie auf einen Kunden mit einem Konto trifft, für das im letzten Monat keine Transaktionen stattgefunden haben. Dies ist eine sehr ungewöhnliche Situation und ist in den Jahren, seitdem diese Anwendung in Produktion gegangen ist, nicht mehr aufgetreten. Während der Behebung des Fehlers bittet Sie ein Programmierer, Testverfahren zu empfehlen, die gegen diese Art von Fehler wirksam sind. Welche der folgenden Testverfahren hätte den zugrundeliegenden Fehlerzustand am ehesten aufdecken können?",
    "antworten": {
      "a": "Entscheidungstest",
      "b": "Anweisungstest",
      "c": "Checklistenbasiertes Testen",
      "d": "Intuitive Testfallermittlung"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Für ein Schleifenkonstrukt erfordert die Anweisungsüberdeckung nur, dass alle Anweisungen innerhalb der Schleife ausgeführt werden, aber die Entscheidungsüberdeckung erfordert das Testen sowohl der Bedingungen, unter denen die Schleife ausgeführt wird, als auch der Bedingungen, unter denen sie umgangen wird",
      "b": "FALSCH – Für ein Schleifenkonstrukt erfordert die Anweisungsüberdeckung nur, dass alle Anweisungen innerhalb der Schleife ausgeführt werden, aber die Entscheidungsüberdeckung erfordert das Testen sowohl der Bedingungen, unter denen die Schleife ausgeführt wird, als auch, wenn sie umgangen wird",
      "c": "FALSCH – Checklisten basieren auf Erfahrung, Fehlerdaten, Wissen darüber, was für den Benutzer wichtig ist, und einem Verständnis darüber, warum und wie Software versagt, wobei nichts davon zur Aufnahme einer solchen Testbedingung geführt haben dürfte",
      "d": "FALSCH – Es ist zwar möglich, dass ein Entwickler die irrtümliche Annahme macht, dass es immer mindestens eine Transaktion in einem Monat für jedes Konto gibt, aber nur Entscheidungstests garantieren das Testen dieser Bedingung"
    }
  },
  {
    "frage": "Sie testen für eine unbeaufsichtigte amerikanische Zapfsäule, an der nur Kreditkarten akzeptiert werden. Nachdem die Kreditkarte validiert, die Zapfpistole in den Tank eingeführt und die gewünschte Sorte ausgewählt wurde, gibt der Kunde die gewünschte Kraftstoffmenge in Gallonen über das Tastenfeld ein. Das Tastenfeld erlaubt nur die Eingabe von Ziffern. Kraftstoff wird in Zehntel (0,1) Gallonen verkauft, bis zu 50,0 Gallonen. Welche der folgenden Eingabewerte ist eine minimale Menge von gewünschten Beträgen, die die Äquivalenzklassen für diese Eingabe abdeckt?",
    "antworten": {
      "a": "0,0; 20,0, 60,0",
      "b": "0,0; 0,1; 50,0",
      "c": "0,0; 0,1; 50,0; 70,0",
      "d": "-0,1; 0,0; 0,1; 49,9; 50,0; 50,1"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Dieser Satz von Eingabewerten hat genau einen Test pro Äquivalenzklasse",
      "b": "FALSCH – Dieser Satz von Eingangswerten deckt die ungültige Überschreitung der höchstens erlaubten 50,0 Gallonen nicht ab",
      "c": "FALSCH – Dieser Satz von Eingangswerten hat zwei Tests für die gültige Verkaufs Äquivalenzklasse, was nicht das Minimum von einem Test ist.",
      "d": "FALSCH – Dieser Satz von Eingabewerten deckt jeweils drei Grenzwerte für die beiden Grenzen 0,0 und 50,0 ab, nicht die Mindestanzahl, die erforderlich ist, um die Äquivalenzklassen abzudecken."
    }
  },
  {
    "frage": "Sie testen ein E-Commerce-System, das Lebensmittel wie Gewürze, Mehl und andere Artikel in großen Mengen verkauft. Die Einheiten, in denen die Artikel verkauft werden, sind entweder Gramm (für Gewürze und andere teure Artikel) oder Kilogramm (für Mehl und andere preiswerte Artikel). Unabhängig von den Einheiten ist die kleinste gültige Bestellmenge 0,5 Einheiten (z. B. ein halbes Gramm Kardamomkapseln) und die größte gültige Bestellmenge 25,0 Einheiten (z. B. 25 Kilogramm Zucker). Die Genauigkeit des Einheitenfeldes beträgt 0,1 Einheiten. Welche der folgenden Eingabewerte decken die Grenzwerte mit Zweipunkt Grenzwerten für dieses Feld ab?",
    "antworten": {
      "a": "0,3; 10,0; 28,0",
      "b": "0,4; 0,5; 0,6; 24,9;25,0; 25,1",
      "c": "0,4; 0,5; 25,0; 25,1",
      "d": "0,5; 0,6; 24,9; 25,0"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Keiner dieser vier Grenzwerte ist in diesem Satz von Tests enthalten. Diese Tests decken die Äquivalenzklassen ab",
      "b": "FALSCH – Alle diese vier Grenzwerte sind in diesem Satz von Tests enthalten, aber zwei zusätzliche Werte sind enthalten, einer für jede Grenze. Dies sind die Werte, die mit der Dreipunkt-Grenzwertanalyse verbunden sind",
      "c": "KORREKT – Jeder dieser vier Zweipunkt-Grenzwerte ist in diesem Satz von Tests enthalten",
      "d": "FALSCH – Diese vier Werte sind alle in der gültigen Äquivalenzklasse enthalten"
    }
  },
  {
    "frage": "Betrachten Sie die folgende Entscheidungstabelle für den Teil eines Online-Flugreservierungssystems, der Vielfliegern das Einlösen von Punkten für Prämienreisen ermöglicht: Zustand 1 2 3 Konto/Passwort okay N J J Ausreichend Punkte - N J Aktion Flugverlauf anzeigen N J J Belohnungsfahrten zulassen N N J Angenommen, es gibt zwei Äquivalenzklassen für die Bedingung, bei der „Konto/Passwort okay“ nicht wahr ist, eine, bei der das Konto ungültig ist, und eine andere, bei der das Konto gültig ist, aber das Passwort ungültig ist. Angenommen, es gibt nur eine Äquivalenzklasse für die Bedingung, in der „Konto/Passwort okay“ wahr ist, in der sowohl das Konto als auch das Passwort gültig sind. Wenn Sie Tests entwerfen möchten, um die Äquivalenzklassen für \"Konto/Passwort okay\" und auch für diesen Teil der Entscheidungstabelle abzudecken, wie viele Tests sind mindestens erforderlich?",
    "antworten": {
      "a": "2",
      "b": "3",
      "c": "4",
      "d": "9"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Die Anzahl der Tests sollte basierend auf den Äquivalenzklassen und der Entscheidungstabelle bestimmt werden",
      "b": "FALSCH – Die Anzahl der Tests sollte basierend auf den Äquivalenzklassen und der Entscheidungstabelle bestimmt werden",
      "c": "KORREKT – Für jede Spalte in der Entscheidungstabelle gibt es mindestens einen Test. Für Spalte eins sind jedoch zwei Tests erforderlich, einer, bei dem das Konto ungültig ist, und ein weiterer, bei dem das Konto gültig ist, aber das Kennwort ungültig ist, sodass die Mindestanzahl an Tests vier beträgt.",
      "d": "FALSCH – Die Anzahl der Tests sollte basierend auf den Äquivalenzklassen und der Entscheidungstabelle bestimmt werden"
    }
  },
  {
    "frage": "Sie testen ein E-Commerce-System, das Lebensmittel wie Gewürze, Mehl und andere Artikel in großen Mengen verkauft. Die Einheiten, in denen die Artikel verkauft werden, sind entweder Gramm (für Gewürze und andere teure Artikel) oder Kilogramm (für Mehl und andere preiswerte Artikel). Unabhängig von den Einheiten ist die kleinste gültige Bestellmenge 0,5 Einheiten (z. B. ein halbes Gramm Kardamomkapseln) und die größte gültige Bestellmenge 25,0 Einheiten (z. B. 25 Kilogramm Zucker). Die Genauigkeit des Feldes 'Einheiten' beträgt 0,1 Einheiten. Welche der folgenden ist eine MINIMALE Menge von Eingabewerten, die die Äquivalenzklassen für dieses Feld abdecken?",
    "antworten": {
      "a": "10,0; 28,0",
      "b": "0,4; 0,5; 25,0; 25,1",
      "c": "0,2; 0,9; 29,5",
      "d": "12,3"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Nur zwei der Äquivalenzklassen werden in diesem Satz von Tests abgedeckt.",
      "b": "FALSCH – Jeder dieser vier Grenzwerte ist in diesem Satz von Tests enthalten, aber die Frage fragte nach der Abdeckung der Äquivalenzklasse mit minimalen Tests, also sollte entweder 0,5 oder 25,0 weggelassen werden.",
      "c": "KORREKT – Jede dieser drei Äquivalenzklassen wird in diesem Testsatz abgedeckt.",
      "d": "FALSCH – Nur eine dieser Äquivalenzklassen wird von diesem Test abgedeckt."
    }
  },
  {
    "frage": "Sie arbeiten als Tester an einem Online-Banking-System. Die Verfügbarkeit wird als eines der Top-Produkt(qualitäts)risiken für das System angesehen. Sie finden einen reproduzierbaren Fehler, der dazu führt, dass Kunden bei Überweisungen zwischen gängigen Kontotypen die Verbindung zur Bank-Website verlieren und diese dann drei bis fünf Minuten lang nicht wiederhergestellt werden kann. Welche der folgenden Aussagen wäre eine gute Zusammenfassung für einen Fehlerbericht für diesen Fehler, die sowohl das Wesentliche des Fehlers als auch seine Auswirkungen auf die Beteiligten erfasst?",
    "antworten": {
      "a": "Webserver-Protokolle zeigen beim Ausführen von Test 07.005 den Fehler 0x44AB27 an, was keine erwartete Fehlermeldung im /tmp-Dateisystem ist",
      "b": "Die Entwickler haben einen schwerwiegenden Verfügbarkeitsfehler eingeführt, der unsere Kunden ernsthaft verärgern wird",
      "c": "Die Leistung ist langsam und die Zuverlässigkeit unter Last schwankend",
      "d": "Typische Überweisungstransaktion führt zur Unterbrechung der Kundensitzung, mit einer Verzögerung der Verfügbarkeit beim Versuch, die Verbindung wiederherzustellen"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Während diese Informationen für Entwickler nützlich sind, geben sie Managern kein Gefühl für die Auswirkungen auf die Produktqualität.",
      "b": "FALSCH – Diese Zusammenfassung liefert Entwicklern oder Managern nicht die notwendigen Informationen und greift die Entwickler an.",
      "c": "FALSCH – Diese Zusammenfassung liefert Entwicklern oder Managern nicht die notwendigen Informationen.",
      "d": "KORREKT – Diese Zusammenfassung vermittelt ein gutes Gefühl für den Ausfall und seine Auswirkungen."
    }
  },
  {
    "frage": "Welcher der folgenden Punkte ist eine gängige Testmetrik, die häufig verwendet wird, um SOWOHL die Testvorbereitung ALS AUCH die Testausführung zu überwachen?",
    "antworten": {
      "a": "Status des Testfalls",
      "b": "Fehlerfindungsraten / Fehlerbehebungsraten",
      "c": "Vorbereitung der Testumgebung",
      "d": "Geschätzte Kosten, um den nächsten Fehlerzustand zu finden"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Der Prozentsatz der vorbereiteten Testfälle ist eine übliche Metrik während der Testvorbereitung, während der Prozentsatz der bestandenen, fehlgeschlagenen, nicht ausgeführten Testfälle usw. während der Testausführung üblich ist.",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Welche folgenden Faktoren können zur Bestimmung der Risikostufe herangezogen werden?",
    "antworten": {
      "a": "Testen und Entwicklung",
      "b": "Dynamisch und reaktiv",
      "c": "Stellungnahme und Entscheidung",
      "d": "Eintrittswahrscheinlichkeit und Auswirkungen"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "Die Höhe des Risikos wird durch die Wahrscheinlichkeit des Eintretens eines unerwünschten Ereignisses und die Auswirkungen (den Schaden) dieses Ereignisses bestimmt. Daher ist die Option d) KORREKT."
    }
  },
  {
    "frage": "Welcher der folgenden Punkte ist der wahrscheinlichste Teil des Prozesses, der als nächstes überprüft werden sollte?",
    "antworten": {
      "a": "Die Aktivität von Entwicklern, die in Schritt b möglicherweise nicht ausreichend getestet wurde",
      "b": "Die Aktivität von Testern, die möglicherweise unklar darüber sind, was in Schritt e zu testen ist",
      "c": "Konfigurationsmanagement, das möglicherweise die Integrität des Produkts in Schritt d nicht aufrecht erhält",
      "d": "Die Aktivität von Entwicklern, die die Fehler in Schritt a möglicherweise nicht korrekt beheben"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "Das Konfigurationsmanagement bewahrt die Integrität der Software. Wenn ein Test, der in Schritt 3 bestanden wurde, in Schritt 5 fehlschlägt, dann ist etwas zwischen diesen beiden Schritten anders. Ein möglicher Unterschied ist das Testobjekt, die hier aufgeführte Option. Ein weiterer möglicher Unterschied ist der zwischen der Entwicklungsumgebung und der Testumgebung, aber das ist keine hier aufgeführte Option.",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Welche Aussage beschreibt Ihren Schätzungsansatz genau?",
    "antworten": {
      "a": "Ein gleichzeitiger expertenbasierter und metrikbasierter Ansatz",
      "b": "In erster Linie ein expertenbasierter Ansatz, ergänzt durch einen metrikbasierten Ansatz",
      "c": "In erster Linie ein metrikbasierter Ansatz, ergänzt durch einen expertenbasierten Ansatz",
      "d": "Primär Planungspoker, geprüft durch Geschwindigkeit aus Burndown-Charts"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH",
      "b": "Die primären Informationsquellen stammen von den erfahrenen Testern, die die Experten sind. Die Branchendurchschnittswerte des Beraters ergänzen die ursprüngliche Schätzung aus veröffentlichten Metriken.",
      "c": "FALSCH",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Welcher der folgenden Punkte ist ein Vorteil der Testunabhängigkeit, der in dieser Situation deutlich wird?",
    "antworten": {
      "a": "Erkennen von verschiedenen Arten von Fehlern",
      "b": "Übernahme der Hauptverantwortung für die Qualität",
      "c": "Einen Fehlerzustand frühzeitig beheben",
      "d": "Annahmen der Stakeholder in Frage stellen"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "Die Annahmen der Stakeholder in Frage zu stellen, ist ein Vorteil der Unabhängigkeit des Testers, und hier gehen sowohl der Entwickler als auch der Product Owner von unterschiedlichen Annahmen bezüglich der Abnahmekriterien aus."
    }
  },
  {
    "frage": "Sie definieren den Prozess für die Durchführung der Produktrisikoanalyse als Teil jeder Iteration in einem agilen Projekt. Welche der folgenden Stellen ist die KORREKTE, um diesen Prozess in einem Testkonzept zu dokumentieren?",
    "antworten": {
      "a": "Umfang des Testens",
      "b": "Testvorgehensweise",
      "c": "Testmetriken",
      "d": "Konfigurationsmanagement des Testobjekts"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH",
      "b": "Die Implementierung einer risikobasierten Teststrategie in diesem Projekt ist die allgemeine Testvorgehensweise, daher sollte dieses Thema in diesem Abschnitt behandelt werden.",
      "c": "FALSCH",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Betrachten Sie die folgende Liste von unerwünschten Ergebnissen, die bei der Entwicklung einer mobilen App auftreten können: A. Falsche Summe wird auf dem Display angezeigt B. Änderung der Abnahmekriterien während des Abnahmetests C. Benutzer empfinden die Soft-Tastatur als zu schwer zu bedienen für die Verwendung mit Ihrer App D. System reagiert zu langsam auf Benutzereingaben bei der Suchstring-Eingabe E. Tester dürfen in täglichen Standup-Meetings nicht über Testergebnisse berichten Welche der folgenden Aussagen klassifiziert diese Ergebnisse KORREKT als Projekt- und Produktrisiken?",
    "antworten": {
      "a": "Produktrisiken: B, E; Projekt-Risiken: A, C, D",
      "b": "Produktrisiken: A, C, D; Projektrisiken: B, E",
      "c": "Produktrisiken: A, C, D, E; Projektrisiken: B",
      "d": "Produktrisiken: A, C; Projektrisiken: B, D, E"
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH",
      "b": "Die Liste zeigt Produkt- und Projektrisiken. Falsche Summen auf dem Display (A), Benutzer, die die Soft-Tastatur als schwer zu bedienen empfinden (C) und ein langsames Systemverhalten (D) sind allesamt Produktrisiken. Die Änderung der Abnahmekriterien während des Tests (B) und das Versäumnis, Testergebnisse zu kommunizieren (E), sind Projektrisiken.",
      "c": "FALSCH",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Sie haben gerade ein Pilotprojekt für ein Regressionstest-Werkzeug abgeschlossen. Sie verstehen das Werkzeug viel besser und haben Ihren Testprozess darauf abgestimmt. Sie haben einen standardisierten Ansatz für die Verwendung des Werkzeugs und der zugehörigen Arbeitsprodukte entwickelt. Welcher der folgenden Aussagen ist ein typisches Ziel eines Testautomatisierungsprojekts bzw. Pilotprojekts, das noch verwirklicht werden muss?",
    "antworten": {
      "a": "Erfahren Sie mehr Details über das Werkzeug",
      "b": "Prüfen Sie, wie das Werkzeug in bestehende Prozesse und Praktiken passen würde",
      "c": "Entscheiden Sie sich für Standardverfahren zur Verwendung, Verwaltung, Speicherung und Pflege des Werkzeugs und der Test-Assets",
      "d": "Beurteilen Sie, ob der Nutzen zu vertretbaren Kosten erreicht werden kann"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "Die Bewertung der Vorteile sowie die Konfiguration der Erfassung von Metriken sind typische Ziele eines Testautomatisierungsprojekts bzw. Pilotprojekts, die noch verwirklicht werden müssen."
    }
  },
  {
    "frage": "Welches der folgenden Werkzeuge ist am nützlichsten für das Reporting von Testmetriken?",
    "antworten": {
      "a": "Testmanagementwerkzeug",
      "b": "Werkzeug zur statischen Analyse",
      "c": "Überdeckungswerkzeug",
      "d": "Testwerkzeuge für das modellbasierte Testen"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "Testmanagementwerkzeuge unterstützen die mit dem Testmanager verbundenen Aktivitäten einschließlich Metriken.",
      "b": "FALSCH",
      "c": "FALSCH",
      "d": "FALSCH"
    }
  },
  {
    "frage": "Was beschreibt am besten die Rolle eines Testers im Testprozess?",
    "antworten": {
      "a": "Die Überprüfung der Testumgebung und die Gewährleistung der Testbarkeit der Anwendung.",
      "b": "Die Planung, Durchführung und Dokumentation der Tests basierend auf vordefinierten Anforderungen.",
      "c": "Die Programmierung neuer Funktionen und die Korrektur von gefundenen Fehlern.",
      "d": "Die ausschließliche Fokussierung auf die Automatisierung bestehender Testfälle."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH - Während die Überprüfung der Testumgebung wichtig ist, beschreibt dies nicht vollständig die Rolle eines Testers.",
      "b": "KORREKT - Tester sind für die Planung, Durchführung und Dokumentation der Tests verantwortlich.",
      "c": "FALSCH - Die Programmierung neuer Funktionen gehört in der Regel nicht zu den Aufgaben eines Testers.",
      "d": "FALSCH - Testautomatisierung ist nur ein Teil des Testprozesses, nicht die gesamte Rolle eines Testers."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen zum Regressionstest ist WAHR?",
    "antworten": {
      "a": "Regressionstests werden durchgeführt, um sicherzustellen, dass neue Fehler in bereits getesteten Softwareteilen eingeführt wurden.",
      "b": "Regressionstests sind nur notwendig, wenn die Software in einer agilen Umgebung entwickelt wird.",
      "c": "Regressionstests umfassen das erneute Testen von fixierten Fehlern, um sicherzustellen, dass die Korrekturen funktionieren.",
      "d": "Regressionstests werden durchgeführt, um sicherzustellen, dass Änderungen nicht zu Fehlern in unveränderten Bereichen der Software führen."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH - Das Ziel des Regressionstests ist es nicht, neue Fehler einzuführen, sondern sicherzustellen, dass durch Änderungen keine neuen Fehler in bereits getesteten Teilen verursacht werden.",
      "b": "FALSCH - Regressionstests sind unabhängig von der Entwicklungsart oder -methode wichtig und notwendig.",
      "c": "FALSCH - Während das Testen von fixierten Fehlern wichtig ist, ist es nicht die primäre Definition von Regressionstests.",
      "d": "KORREKT - Regressionstests zielen darauf ab, die Stabilität und Zuverlässigkeit der Software nach Änderungen zu gewährleisten, indem sichergestellt wird, dass keine neuen Fehler in unveränderte Bereiche eingeführt wurden."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen ist ein typisches Ziel des Testens von Software?",
    "antworten": {
      "a": "Fehlerwirkungen und Fehlerzustände aufdecken",
      "b": "Validierung von Projektplänen",
      "c": "Sicherstellen von vollständigen Tests",
      "d": "Vergleich der Istergebnisse mit den erwarteten Ergebnissen"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Eines der typischen Hauptziele des Testens aus dem Lehrplan (1.1.1).",
      "b": "FALSCH – Die Validierung des Projektplans ist eine Projektmanagementaktivität.",
      "c": "FALSCH – Widerspruch zum Grundsatz 2; Vollständiges Test ist nicht möglich. (CTFL CORE Syllabus 2018, V.3.1; Abschnitt 1.3).",
      "d": "FALSCH – „Vergleich der Istergebnisse mit den erwarteten Ergebnissen“ ist eine Aktivität der Testdurchführung, aber kein Testziel. (CTFL CORE Syllabus 2018, V.3.1; Abschnitt 1.4.2, Testdurchführung)."
    }
  },
  {
    "frage": "Welches der folgenden Beispiele ist eine Fehlerwirkung in einem Tempomat eines Autos?",
    "antworten": {
      "a": "Der Entwickler des Systems hat vergessen, Variablen nach einem Ausschneiden und Einfügen umzubenennen.",
      "b": "Nicht benötigter Code, der beim Rückwärtsfahren einen Alarm auslöst, wurde in das System aufgenommen.",
      "c": "Das System hält die eingestellte Geschwindigkeit nicht mehr ein, wenn die Radiolautstärke erhöht oder verringert wird.",
      "d": "Die System-Entwurfsspezifikation gibt die Geschwindigkeit falsch an."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Dies ist ein Beispiel für einen vom Entwickler begangenen Fehler (Fehlhandlung).",
      "b": "FALSCH – Dies ist ein Beispiel für einen Fehlerzustand (etwas, das im Code falsch ist und einen Fehler verursachen kann).",
      "c": "KORREKT – Dies ist eine Abweichung von der erwarteten Funktionalität - ein Tempomat sollte nicht von der Lautstärkeeinstellung des Radios betroffen sein.",
      "d": "FALSCH – Dies ist ein Beispiel für einen Defekt (Fehlerzustand in einer Spezifikation, die eine Fehlerwirkung verursachen kann, wenn gegen die Spezifikation anschließend implementiert wird)."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen ist eher ein Fehlerzustand als eine Grundursache für einen Fehlerzustand in einem Fitness-Tracker?",
    "antworten": {
      "a": "Der Anforderungsmanager war mit der Domäne des Fitnesstrainings nicht vertraut und ging zu Unrecht davon aus, dass die Benutzer die Herzschlag Frequenz in Schlägen pro Stunde ablesen wollen.",
      "b": "Der Tester des Smartphone-Interfaces war nicht im zustandsbasierten Testen geschult und hat daher einen signifikanten Fehler übersehen.",
      "c": "Eine vom Entwickler für die GPS-Funktion fehlerhaft implementierte Konfigurationsvariable kann während der Sommerzeit zu Standortproblemen führen.",
      "d": "Die Designerin der Benutzeroberfläche hat noch nie an tragbaren Geräten gearbeitet und missverstand deshalb die Auswirkungen von reflektiertem Sonnenlicht."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Die mangelnde Vertrautheit des Anforderungsmanagers mit der Fitnessdomäne ist eine Grundursache für einen Fehlerzustand.",
      "b": "FALSCH – Die fehlende Schulung des Testers im zustandsbasierten Testen war eine Grundursache für den Fehler.",
      "c": "KORREKT – Die fehlerhaft implementierte Konfigurationsvariable stellt einen Fehlerzustand in der Software des Fitness-Trackers dar, der zu Standortproblemen führen kann.",
      "d": "FALSCH – Die mangelnde Erfahrung bei der Gestaltung von Benutzeroberflächen für tragbare Geräte ist eine Grundursache für einen Fehlerzustand."
    }
  },
  {
    "frage": "Als Ergebnis der Risikoanalyse werden mehr Tests auf die Bereiche des Systems unter Test angewendet, in denen die ersten Tests mehr Fehler als in den anderen Bereichen aufgedeckt haben. Welcher der folgenden Grundsätze des Testens wird angewendet?",
    "antworten": {
      "a": "Vorsicht vor dem Pestizid-Paradoxon.",
      "b": "Das Testen ist kontextabhängig.",
      "c": "Trugschluss: Keine Fehler bedeutet brauchbares System.",
      "d": "Häufung von Fehlerzuständen."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Das Pestizid-Paradoxon bezieht sich darauf, dass die Wiederholung derselben Tests dazu führen kann, dass einige Fehler unentdeckt bleiben.",
      "b": "FALSCH – Dies bezieht sich darauf, dass der Testansatz je nach Kontext variieren sollte.",
      "c": "FALSCH – Dieses Prinzip besagt, dass das Fehlen von Fehlern nicht zwangsläufig bedeutet, dass das System fehlerfrei ist.",
      "d": "KORREKT – Dieses Prinzip besagt, dass sich Fehler oft in bestimmten Bereichen häufen, und darauf sollte der Testfokus verstärkt werden."
    }
  },
  {
    "frage": "Gegeben seien die folgenden Listen von Testaktivitäten (A.-D.) und Testaufgaben (1.-4.): A. Testentwurf B. Testrealisierung C. Testdurchführung D. Testabschluss 1. Erfassung von Änderungsanforderungen für offene Fehlerberichte 2. Identifizierung von Testdaten zur Unterstützung der Testfälle 3. Priorisierung von Testabläufen und Vorbereitung von Testdaten 4. Analyse von Abweichungen, um deren Ursache zu ermitteln Welches ist die korrekte Paarung von Testaktivitäten und Testaufgaben?",
    "antworten": {
      "a": "A-2, B-3, C-4, D-1",
      "b": "A-2, B-1, C-3, D-4",
      "c": "A-3, B-2, C-4, D-1",
      "d": "A-3, B-2, C-1, D-4"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT - Die korrekte Zuordnung von Testaktivitäten und Testaufgaben laut Lehrplan (1.4.2) ist: A-2, B-3, C-4, D-1.",
      "b": "FALSCH - Die Zuordnung ist nicht korrekt.",
      "c": "FALSCH - Die Zuordnung ist nicht korrekt.",
      "d": "FALSCH - Die Zuordnung ist nicht korrekt."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt AM BESTEN, wie ein Mehrwert durch Aufrechterhaltung und Wartung der Verfolgbarkeit zwischen Testbasis und Testartefakten erzielt wird?",
    "antworten": {
      "a": "Wartungstests können basierend auf Änderungen der ursprünglichen Anforderungen vollständig automatisiert werden.",
      "b": "Es kann festgestellt werden, ob ein neuer Testfall eine höhere Abdeckung der Anforderungen erreicht.",
      "c": "Testmanager können feststellen, welche Tester die Fehler mit dem höchsten Schweregrad gefunden haben.",
      "d": "Bereiche, die möglicherweise durch Seiteneffekte einer Änderung beeinflusst werden, können durch Regressionstests gezielt überprüft werden."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH - Die Verfolgbarkeit unterstützt die Automatisierung von Wartungstests nicht.",
      "b": "KORREKT - Die Verfolgbarkeit ermöglicht es festzustellen, ob neue Testfälle eine höhere Abdeckung der Anforderungen erreichen.",
      "c": "FALSCH - Die Verfolgbarkeit zwischen Testbasis und Testartefakten bietet keine Informationen darüber, welche Tester Fehler mit dem höchsten Schweregrad gefunden haben.",
      "d": "FALSCH - Seiteneffekte einer Änderung betreffen nicht direkt verfolgbare Bereiche."
    }
  },
  {
    "frage": "Welche der folgenden Eigenschaften findet man EHER in der Denkweise eines Testers als in der Denkweise eines Entwicklers?",
    "antworten": {
      "a": "Die Leistung eines Testers wächst und reift mit steigender Erfahrung.",
      "b": "Die Fähigkeit zu erkennen, was an Lösungen falsch sein könnte.",
      "c": "Gute Kommunikation mit Teammitgliedern.",
      "d": "Aufmerksamkeit für Details."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH - Sowohl Entwickler als auch Tester profitieren von Erfahrung.",
      "b": "KORREKT - Tester sind eher darauf fokussiert zu erkennen, was an Lösungen falsch sein könnte.",
      "c": "FALSCH - Sowohl Entwickler als auch Tester sollten gute Kommunikationsfähigkeiten haben.",
      "d": "FALSCH - Sowohl Entwickler als auch Tester müssen auf Details achten."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen vergleicht die Zwecke der Fehlernachtests und Regressionstests AM BESTEN miteinander?",
    "antworten": {
      "a": "Der Regressionstest stellt sicher, dass alle früher durchgeführten Tests immer noch korrekt laufen, während der Fehlernachtest sicherstellt, dass Korrekturen an einem Teil des Systems die anderen Teile nicht negativ beeinflussen.",
      "b": "Der Fehlernachtest prüft, dass ein vorher gefundener Fehlerzustand korrigiert wurde, während der Regressionstest sicherstellt, dass die Korrektur keine anderen Teile des Systems negativ beeinflusst hat.",
      "c": "Der Regressionstest stellt sicher, dass Korrekturen an einem Teil des Systems die anderen Teile nicht negativ beeinflussen, während der Fehlernachtest prüft, dass alle früher durchgeführten Tests immer noch die gleichen Ergebnisse produzieren.",
      "d": "Der Fehlernachtest bestätigt, dass die Änderungen am System erfolgreich durchgeführt wurden, während der Regressionstest Tests durchführt, die vorher fehlgeschlagen sind, um sicherzustellen, dass sie jetzt korrekt funktionieren."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Obwohl die Beschreibung des Regressionstests weitgehend richtig ist, ist die Beschreibung des Fehlernachtests (welcher bestätigen sollte, dass ein Fehlerzustand behoben wurde) falsch.",
      "b": "KORREKT – Die Beschreibungen von Fehlernachtest und Regressionstest entsprechen sinngemäß dem CTFL Lehrplan 2018, Abschnitt 2.3.",
      "c": "FALSCH – Obwohl die Beschreibung des Regressionstests weitgehend richtig ist, ist die Beschreibung des Fehlernachtests (erneute Durchführung aller früher durchgeführten Tests) falsch. Der Zweck des Fehlernachtests ist zu prüfen, ob Tests, die früher fehlgeschlagen sind, jetzt korrekt funktionieren.",
      "d": "FALSCH – Obwohl die Beschreibung des Fehlernachtests weitgehend richtig ist, ist die Beschreibung des Regressionstests (Tests durchzuführen, die vorher fehlgeschlagen sind) falsch. Das würde eher einer detaillierteren Beschreibung des Fehlernachtests entsprechen."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt eine Aufgabe der Auswirkungsanalyse im Wartungstest KORREKT?",
    "antworten": {
      "a": "Die Auswirkungsanalyse unterstützt bei der Entscheidung, ob sich eine Fehlerkorrektur beim zu wartenden System lohnt.",
      "b": "Die Auswirkungsanalyse identifiziert, wie Daten in das gewartete System zu migrieren sind.",
      "c": "Die Auswirkungsanalyse unterstützt bei der Entscheidung, welche Hot Fixes den meisten Nutzen für den Benutzer haben.",
      "d": "Die Auswirkungsanalyse unterstützt die Ermittlung der Effektivität neuer Wartungstestfälle."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Die Auswirkungsanalyse kann verwendet werden, um die Bereiche des Systems zu identifizieren, die von einer Fehlerbehebung betroffen sind. Daher kann das Ausmaß der Auswirkungen (z. B. nötige Regressionstests) verwendet werden, um bei der Entscheidung zu helfen, ob die Veränderung vorgenommen werden sollte (Siehe CTFL CORE Lehrplan 2018, Abschnitt 2.4.2).",
      "b": "FALSCH – Obwohl der Test der migrierten Daten Teil des Wartungstests ist (siehe Konvertierungstest), ermittelt die Auswirkungsanalyse nicht, wie dieser Test auszusehen hat.",
      "c": "FALSCH – Die Auswirkungsanalyse ermittelt, welche Teile eines Systems von einer Änderung betroffen sind. Somit kann sie den Unterschied zwischen verschiedenen Hot Fixes in Hinsicht auf die Auswirkungen auf das System aufzeigen. Sie gibt aber keine Hinweise darauf, welchen Nutzen die Änderungen für den Benutzer haben.",
      "d": "FALSCH – Die Auswirkungsanalyse ermittelt, welche Teile eines Systems von einer Änderung betroffen sind. Sie kann aber keine Anhaltspunkte zur Effektivität von Testfällen liefern."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen gibt den Nutzen des statischen Tests KORREKT wieder?",
    "antworten": {
      "a": "Nach der Einführung von Reviews stellten wir fest, dass sich sowohl die Qualität der Spezifikationen als auch die für Entwicklung und Test benötigte Zeit erhöht haben.",
      "b": "Durch die Anwendung von statischem Test können wir den Test besser steuern und haben ein günstigeres Fehlermanagement, weil sich Fehlerzustände später im Lebenszyklus leichter finden lassen.",
      "c": "Da wir jetzt statische Analyse nutzen, haben fehlende Anforderungen abgenommen und die Kommunikation zwischen Testern und Entwicklern hat sich verbessert.",
      "d": "Seitdem wir statische Analysen eingeführt haben, finden wir Programmierfehler, die wir allein durch dynamischen Test möglicherweise nicht gefunden hätten."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Reviews sollten die Qualität der Spezifikationen erhöhen, aber die für Entwicklung und Test benötigte Zeit verringern (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.1.2).",
      "b": "FALSCH – Die Behebung von Fehlerzuständen ist im Allgemeinen früher im Lebenszyklus leichter (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.1.2).",
      "c": "FALSCH – Reviews führen zu weniger fehlenden Anforderungen und besserer Kommunikation zwischen Testern und Entwicklern, aber Letzteres gilt nicht für statische Analysen (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.1.2).",
      "d": "KORREKT – Dies ist ein Nutzen der statischen Analyse (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.1.2)."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen zur Anwendung von Checklisten bei einem formalen Review ist KORREKT?",
    "antworten": {
      "a": "Im Rahmen der Planung des Reviews erstellen die Reviewer die für das Review benötigten Checklisten.",
      "b": "Im Rahmen der Befundkommunikation füllen die Reviewer die für das Review bereitgestellten Checklisten aus.",
      "c": "Im Rahmen der Reviewsitzung erstellen die Reviewer auf Basis der für das Review bereitgestellten Checklisten Fehlerberichte.",
      "d": "Im Rahmen des Reviewbeginns (Kick-Off) erhalten die Reviewer die für das Review benötigten Checklisten."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – In der Planung wird entschieden, ob Checklisten eingesetzt werden (vgl. Lehrplan, Abschnitt 3.2.1). Die Erstellung der Checklisten ist nicht Teil der Planung. Außerdem sind die Reviewer weder in die Planung involviert, noch für die Erstellung der Checklisten verantwortlich (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.2).",
      "b": "FALSCH – In der Befundkommunikation werden im individuellen Review identifizierte potenzielle Fehlerzustände kommuniziert. Das Ausfüllen von Checklisten durch die Reviewer erfolgt, wenn überhaupt, bereits im individuellen Review (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.1).",
      "c": "FALSCH – In der Reviewsitzung kommunizieren die Reviewer die im Rahmen des individuellen Reviews identifizierten potenziellen Fehlerzustände des Arbeitsergebnisses (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.1). Fehlerberichte werden erst in der Aktivität Fehlerbehebung und Bericht erstellt.",
      "d": "KORREKT – Der Reviewbeginn (Kick-Off) umfasst das Verteilen des Arbeitsergebnisses und anderer Materialien, wie Checklisten (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.1)."
    }
  },
  {
    "frage": "Welche der folgenden Optionen gibt die Rollen und Verantwortlichkeiten in einem formalen Review KORREKT wieder?",
    "antworten": {
      "a": "Management – Entscheidet über die Durchführung von Reviews",
      "b": "Reviewleiter – Stellt den erfolgreichen Ablauf von Reviewsitzungen sicher",
      "c": "Protokollant – Behebt Fehlerzustände im Arbeitsergebnis, das einem Review unterzogen wurde",
      "d": "Moderator – Überwacht die stetige Kosteneffizienz"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Das Management entscheidet über die Durchführung von Reviews (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.2).",
      "b": "FALSCH – Der Moderator stellt den erfolgreichen Ablauf von Reviewsitzungen sicher (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.2).",
      "c": "FALSCH – Der Autor behebt Fehlerzustände im Arbeitsergebnis, das einem Review unterzogen wurde (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.2).",
      "d": "FALSCH – Das Management überwacht die stetige Kosten-Wirksamkeits-Analyse (Siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.2)."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt AM BESTEN exploratives Testen?",
    "antworten": {
      "a": "Eine Testvorgehensweise/ein Testansatz, bei der eine intensive Untersuchung des Hintergrunds des Testobjekts dazu genutzt wird, mögliche Schwachstellen zu identifizieren, die durch Testfälle untersucht werden.",
      "b": "Eine Testvorgehensweise/ein Testansatz bei dem die Tester, basierend auf ihrem Wissen, der Erkundung des Testelements und dem Ergebnis früherer Tests, dynamisch Tests entwerfen und durchführen.",
      "c": "Eine Testvorgehensweise/ein Testansatz, bei dem die Testaktivitäten - insbesondere Testanalyse und Testentwurf - als unterbrechungsfreie Sitzungen geplant werden, oft in Verbindung mit checklisten-basiertem Testen.",
      "d": "Eine Testvorgehensweise/ein Testansatz, das auf der Erfahrung, dem Wissen und der Intuition des Testers basiert."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Exploratives Testen wird meistens bei kurzfristigen Zeitvorgaben durchgeführt, daher sind intensive Untersuchungen des Hintergrunds des Testobjekts eher ungewöhnlich.",
      "b": "KORREKT – Ein Testansatz, bei dem die Tests dynamisch entworfen und ausgeführt werden, basierend auf Wissen, der Erkundung des Testelements und den Ergebnissen früherer Tests. (Definition Glossar V.3.3)",
      "c": "FALSCH – Basiert auf der Definition des Glossars für sitzungsbasiertes Testen, jedoch wurde Testdurchführung durch Testanalyse ersetzt.",
      "d": "FALSCH – Basiert auf der Definition des Glossars für erfahrungsbasiertes Testen."
    }
  },
  {
    "frage": "Welche der folgenden Zuordnungen von Beschreibungen zu verschiedenen Kategorien von Testverfahren trifft AM BESTEN zu?",
    "antworten": {
      "a": "Black – 4, 5; White – 1, 2; Erfahrung – 3",
      "b": "Black – 3; White – 1, 2; Erfahrung – 4, 5",
      "c": "Black – 4; White – 1, 2; Erfahrung – 3, 5",
      "d": "Black – 1, 3, 5; White – 2; Erfahrung – 4"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Black-Box-Testverfahren: Abweichungen von Anforderungen werden überprüft (4) User-Stories werden als Testbasis herangezogen (5). White-Box-Testverfahren: Überdeckung wird auf Basis einer ausgewählten Struktur des Testobjektes gemessen (1) Verarbeitung innerhalb des Testobjekts wird überprüft (2). erfahrungsbasiertes Testverfahren: Tests basieren auf der Wahrscheinlichkeit von Fehlerzuständen und deren Verteilung (3).",
      "b": "FALSCH – Die Zuordnung entspricht nicht der Definition der Testverfahren im Syllabus.",
      "c": "FALSCH – Die Zuordnung entspricht nicht der Definition der Testverfahren im Syllabus.",
      "d": "FALSCH – Die Zuordnung entspricht nicht der Definition der Testverfahren im Syllabus."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt AM BESTEN, wie Testfälle aus Anwendungsfällen entworfen werden?",
    "antworten": {
      "a": "Testfälle werden entworfen, um das im Anwendungsfall definierte grundlegende, Sonder- und Fehlerbehandlungs-Verhalten des Systems in Interaktion mit den Akteuren auszuführen.",
      "b": "Testfälle werden entworfen, indem die vom Anwendungsfall betroffenen Komponenten identifiziert und Integrationstests erstellt werden, welche die Interaktionen dieser Komponenten ausführen.",
      "c": "Testfälle werden entworfen, indem die Interaktionen der Akteure mit dem System analysiert werden, um sicherzustellen, dass die Benutzungsschnittstelle des Systems leicht bedienbar ist.",
      "d": "Testfälle werden entworfen, mit denen alle Entscheidungspunkte im Geschäftsprozess des Anwendungsfalls ausgeführt werden, um eine 100%-ige Entscheidungsüberdeckung zu erreichen."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Im Lehrplan unter 4.2.5 Anwendungsfallbasierter Test steht: Jeder Anwendungsfall definiert ein bestimmtes Verhalten, das ein Objekt in Zusammenarbeit mit einem oder mehreren Akteuren ausführen kann. Weiter unten ist zu lesen: Ein Anwendungsfall besteht aus mehreren möglichen Varianten seines grundlegenden Verhaltens, was u. a. Sonder- und Fehlerbehandlungen einschließt (Antwort- und Wiederherstellungsmechanismen des Systems nach Programmier-, Anwendungs- und Kommunikationsfehler, die z. B. zu Fehlermeldungen führen). Tests werden entworfen, um das definierte Verhalten nachzuweisen (grundlegendes, außergewöhnliches oder alternatives Verhalten und die Fehlerbehandlungsroutinen).",
      "b": "FALSCH – Anwendungsfälle spezifizieren normalerweise Anforderungen und schließen daher nicht die Komponenten ein, die sie implementieren.",
      "c": "FALSCH – Anwendungsfallbasierte Tests führen zwar Interaktionen des Systems mit einem oder mehreren Akteuren aus. Aber sie konzentrieren sich auf die Funktionalität und betrachten nicht die leichte Bedienbarkeit der Benutzungsschnittstelle.",
      "d": "FALSCH – Tests decken zwar die Ablaufpfade des Anwendungsfalls ab, es geht jedoch nicht um eine Entscheidungsüberdeckung in diesen Pfaden, und bestimmt nicht in den Kontrollfluss im Geschäftsprozess."
    }
  },
  {
    "frage": "Welche der folgenden Beschreibungen der Anweisungsüberdeckung ist korrekt?",
    "antworten": {
      "a": "Die Anweisungsüberdeckung ist ein Maß für die Anzahl der Quellcodezeilen (ohne Kommentare), die im Test ausgeführt wurden.",
      "b": "Die Anweisungsüberdeckung ist ein Maß für den prozentualen Anteil der ausführbaren Anweisungen im Quellcode, die im Test ausgeführt wurden.",
      "c": "Die Anweisungsüberdeckung ist ein Maß für den prozentualen Anteil der Quellcodezeilen (ohne Kommentare), die im Test ausgeführt wurden.",
      "d": "Die Anweisungsüberdeckung ist ein Maß für die Anzahl der ausführbaren Anweisungen im Quellcode, die im Test ausgeführt wurden."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Die Anweisungsüberdeckung bezieht sich auf durch Tests ausführbare Anweisungen. In einer Zeile können mehrere solcher Anweisungen stehen, und eine Anweisung kann sich über mehrere Zeilen erstrecken.",
      "b": "KORREKT – Der prozentuale Anteil der ausführbaren Anweisungen ist der Anteil im Test ausgeführter Anweisungen bezogen auf alle Anweisungen, also (Anzahl durch die Testsuite ausgeführter Anweisungen / Anzahl alle Anweisungen) x 100%.",
      "c": "FALSCH – Die Anweisungsüberdeckung bezieht sich nicht auf Quellcodezeilen, sondern auf durch Tests ausführbare Anweisungen, s. Begründung zu a).",
      "d": "FALSCH – Die Anweisungsüberdeckung bezieht sich nicht auf die absolute Anzahl der von der Testsuite ausgeführten Anweisungen, sondern auf deren Anteil bezogen auf alle ausführbaren Anweisungen."
    }
  },
  {
    "frage": "Welche der folgenden Beschreibungen der Entscheidungsüberdeckung ist zutreffend?",
    "antworten": {
      "a": "Die Entscheidungsüberdeckung ist ein Maß für den prozentualen Anteil möglicher Pfade durch den Quellcode, die im Test ausgeführt wurden.",
      "b": "Die Entscheidungsüberdeckung ist ein Maß für den prozentualen Anteil der Geschäftsabläufe durch die Komponente, die im Test ausgeführt wurden.",
      "c": "Die Entscheidungsüberdeckung ist ein Maß für die „IF-Anweisungen“ im Quellcode, die im Test sowohl mit dem Ergebnis „WAHR“ als auch mit „FALSCH“ ausgeführt wurden.",
      "d": "Die Entscheidungsüberdeckung ist ein Maß für den Anteil der Entscheidungsergebnisse, die im Test ausgeführt wurden."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Ein Pfad durch den Quellcode ist ein möglicher Ablauf durch den Quellcode vom Eintrittspunkt zum Austrittspunkt, der eine Reihe von Entscheidungsergebnissen ausführen kann. Zwei verschiedene Pfade können bis auf einen die gleichen Entscheidungsergebnisse ausführen. Wird nur ein einziges Entscheidungsergebnis geändert, so wird ein anderer Pfad durchlaufen. Testfälle, die eine vollständige Entscheidungsabdeckung erzielen, sind in der Regel eine winzige Teilmenge der Testfälle, die eine vollständige Pfadüberdeckung erzielen würden. In der Praxis haben die meisten nicht-trivialen Programme (und alle Programme mit unbeschränkten Schleifen, z. B. 'while'-Schleifen) eine potenziell unendliche Anzahl möglicher Pfade, sodass die Messung des abgedeckten Prozentsatzes praktisch unmöglich ist.",
      "b": "FALSCH – Geschäftsabläufe können im anwendungsfallbasierten Test betrachtet werden. Sie werden jedoch nicht durch die Entscheidungsüberdeckung gemessen, auch wenn sie ein oder mehrere Entscheidungsergebnisse ausführen würden.",
      "c": "FALSCH – „IF-Anweisungen“ beinhalten zwar Entscheidungen, sind jedoch nicht die einzige Quelle für Entscheidungen, da z. B. auch Schleifen oder „CASE-Anweisungen“ Entscheidungen beinhalten, aufgrund deren Ergebnis sie ausgeführt oder nicht ausgeführt werden.",
      "d": "KORREKT – S. Lehrplan-Auszug 4.3.2 oben."
    }
  },
  {
    "frage": "Welche der folgenden Optionen beschreibt AM BESTEN das Konzept der intuitiven Testfallermittlung?",
    "antworten": {
      "a": "Die intuitive Testfallermittlung erfordert, dass Sie sich vorstellen, der Benutzer des Testobjekts zu sein und dass Sie Fehler erraten, die der Benutzer bei der Interaktion damit machen könnte.",
      "b": "Die intuitive Testfallermittlung bezieht Ihre persönlichen Entwicklungserfahrungen und die Fehler mit ein, die Sie als Entwickler gemacht haben.",
      "c": "Die intuitive Testfallermittlung verwendet Ihre Kenntnisse und Erfahrungen mit Fehlerzuständen, die in der Vergangenheit gefunden wurden, sowie mit typischen Fehlhandlungen von Entwicklern.",
      "d": "Die intuitive Testfallermittlung erfordert, dass Sie die Entwicklungsaufgabe schnell selbst wiederholen, um die Art von Fehlern zu identifizieren, die Entwickler dabei möglicherweise machen könnten."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Die intuitive Testfallermittlung ist kein Gebrauchstauglichkeitstestverfahren, um zu erraten, wie die Interaktion der Benutzer mit dem Testobjekt möglicherweise fehlschlagen könnte.",
      "b": "FALSCH – Obwohl Tester, die früher Entwickler waren, ihre persönliche Erfahrung nutzen können, um Fehler zu erraten, basiert das Verfahren nicht auf Vorkenntnissen über die Entwicklung.",
      "c": "KORREKT – Siehe Lehrplanexzerpt oben, Fehlhandlungen sind u. a. Fehler von Entwicklern. Das Grundkonzept der intuitiven Testfallermittlung ist, dass Tester anhand von Erfahrungswerten (und manchmal auch Checklisten) erraten, welche Fehler die Entwickler möglicherweise gemacht haben könnten und welche Fehlerzustände im Testobjekt vorliegen könnten.",
      "d": "FALSCH – Das Wiederholen der Entwicklungsaufgabe ist keine intuitive Testfallermittlung. Es wäre darüber hinaus aufgrund mehrerer Probleme nicht praktikabel, z. B. der Anforderung, dass Tester über die gleichen Fähigkeiten wie Entwickler verfügen, und dem zeitlichen Aufwand für eine wiederholte Durchführung der Entwicklung."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt am BESTEN einen Vorteil von unabhängigem Testen?",
    "antworten": {
      "a": "Die Verwendung eines unabhängigen Testteams erlaubt dem Projektmanagement die Verantwortung für die Qualität des finalen Arbeitsergebnisses auf das Testteam zu übertragen. Somit ist jedem bewusst, dass die Qualität in der Gesamtverantwortung des Testteams liegt.",
      "b": "Wenn ein Testteam außerhalb der Organisation zur Verfügung gestellt werden kann, hat dies deutliche Vorteile, da dieses externe Team nicht so leicht von den Bedenken des Projektmanagements und der Notwendigkeit der Einhaltung strenger Lieferfristen beeinflusst wird.",
      "c": "Ein unabhängiges Testteam kann vollkommen separat von den Entwicklern arbeiten, muss sich nicht von sich ändernden Projektanforderungen ablenken lassen und kann die Kommunikation mit den Entwicklern auf das Verfassen von Fehlerberichten über das Fehlermanagementsystem beschränken.",
      "d": "Wenn Spezifikationen Mehrdeutigkeiten und/oder Inkonsistenzen enthalten, werden Annahmen zu deren Interpretation getroffen. Ein unabhängiger Tester kann hilfreich sein, um die vom Entwickler getroffenen Annahmen und vorgenommenen Interpretationen in Frage zu stellen."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Qualität sollte in der Verantwortung aller am Projekt Beteiligten liegen und nicht in der alleinigen Verantwortung des Testteams (siehe CTFL Lehrplan 2018, Abschnitt 5.1.1, „Mögliche Nachteile von Testunabhängigkeit …“, 2. Punkt).",
      "b": "FALSCH – Zum einen ist es kein Vorteil, wenn ein externes Testteam die Lieferfristen nicht einhält, und zum anderen gibt es keinen Grund zu der Annahme, dass externe Testteams das Gefühl haben, die strengen Lieferfristen nicht einhalten zu müssen (siehe CTFL Lehrplan 2018, Abschnitt 5.1.1, „Mögliche Nachteile von Testunabhängigkeit …“, 3. Punkt).",
      "c": "FALSCH – Es ist eine schlechte Praxis für das Testteam, völlig isoliert zu arbeiten, und außerdem sollte sich auch ein externes Testteam mit sich ändernden Projektanforderungen befassen und gut mit den Entwicklern kommunizieren (siehe CTFL Lehrplan 2018, Abschnitt 5.1.1, „Mögliche Nachteile von Testunabhängigkeit …“, 1. Punkt).",
      "d": "KORREKT – Spezifikationen sind niemals perfekt, was bedeutet, dass Annahmen vom Entwickler getroffen werden müssen. Ein unabhängiger Tester ist nützlich, um die Annahme in Frage zu stellen und zu überprüfen (siehe CTFL Lehrplan 2018, Abschnitt 5.1.1, „Mögliche Vorteile von Testunabhängigkeit…“, 2.Punkt)."
    }
  },
  {
    "frage": "Welche der folgenden Aufgaben wird AM WAHRSCHEINLICHSTEN vom Testmanager ausgeführt?",
    "antworten": {
      "a": "Erstellen von Testabschlussberichten auf der Grundlage der während des Tests gesammelten Informationen.",
      "b": "Tests prüfen, die von anderen entwickelt wurden.",
      "c": "Testdaten vorbereiten und beschaffen.",
      "d": "Anforderungen, Spezifikationen und Modelle auf Testbarkeit analysieren, prüfen und beurteilen."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Eine der typischen Aufgaben eines Testmanagers gemäß CTFL Lehrplan 2018, Abschnitt 5.1.2.",
      "b": "FALSCH – Eine der typischen Aufgaben eines Testers gemäß CTFL Lehrplan 2018, Abschnitt 5.1.2.",
      "c": "FALSCH – Eine der typischen Aufgaben eines Testers gemäß CTFL Lehrplan 2018, Abschnitt 5.1.2.",
      "d": "FALSCH – Eine der typischen Aufgaben eines Testers gemäß CTFL Lehrplan 2018, Abschnitt 5.1.2."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen über Testschätzverfahren ist korrekt?",
    "antworten": {
      "a": "Beim metrikbasierten Verfahren basiert die Schätzung auf Testmaßnahmen aus dem Projekt, so dass diese Schätzung erst nach Beginn des Tests verfügbar ist.",
      "b": "Beim expertenbasierten Verfahren empfiehlt eine vom Kunden identifizierte Gruppe von Experten das erforderliche Testbudget.",
      "c": "Beim expertenbasierten Verfahren schätzen die für die verschiedenen Testaktivitäten verantwortlichen Testmanager den erwarteten Testaufwand.",
      "d": "Beim metrikbasierten Ansatz wird ein Durchschnitt der Testkosten, die aus mehreren vergangenen Projekten ermittelt wurden, als Testbudget verwendet."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Die Schätzungen werden möglicherweise aktualisiert, sobald weitere Informationen verfügbar sind. Es sind jedoch Schätzungen erforderlich, um die Planung vor Beginn der Tests zu unterstützen.",
      "b": "FALSCH – Die Experten beim expertenbasierten Verfahren müssen Experten für das Testen sein und nicht für das Testobjekt.",
      "c": "KORREKT – Beim expertenbasierten Ansatz werden die für die verschiedenen Testaktivitäten verantwortlichen Testmanager als Experten für ihr jeweiliges Gebiet betrachtet. Daher sind sie in der Lage, den erwarteten Testaufwand zu schätzen.",
      "d": "FALSCH – Es ist zwar nützlich, die Testkosten aus früheren Projekten zu kennen, jedoch ist ein anspruchsvollerer Ansatz erforderlich, als nur den Durchschnitt vergangener Projekte zu ermitteln. (Das neue Projekt kann möglicherweise nicht mit den vergangenen Projekten vergleichbar sein, z. B. kann es viel größer oder viel kleiner sein als die vergangenen Projekte)."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen definiert AM BESTEN die Risikostufe (Höhe des Risikos)?",
    "antworten": {
      "a": "Die Risikostufe wird berechnet, indem die Wahrscheinlichkeiten aller Problemsituationen und der daraus resultierende finanzielle Schaden addiert werden.",
      "b": "Die Risikostufe wird geschätzt, indem die Wahrscheinlichkeit einer Bedrohung des Systems multipliziert wird mit der Wahrscheinlichkeit, dass die Bedrohung auftritt und finanzielle Schäden verursacht.",
      "c": "Die Risikostufe wird bestimmt durch eine Kombination der Wahrscheinlichkeit eines unerwünschten Ereignisses und der erwarteten Auswirkung dieses Ereignisses.",
      "d": "Die Risikostufe ist die Summe aller potenziellen Gefahren für ein System multipliziert mit der Summe aller potenziellen Verluste aus diesem System."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Die Risikostufe wird bestimmt, indem eine Kombination aus der Wahrscheinlichkeit von Problemsituationen und dem daraus resultierenden Schaden betrachtet wird; die Risikostufe kann jedoch nicht durch Addition dieser Faktoren berechnet werden (die Wahrscheinlichkeit würde im Bereich von 0 bis 1 liegen und der Schaden könnte in Euro beziffert sein).",
      "b": "FALSCH – Das Risiko wird bestimmt, indem eine Kombination aus Wahrscheinlichkeit und Auswirkung berücksichtigt wird. Diese Definition berücksichtigt nur Wahrscheinlichkeit und Zufall ohne Berücksichtigung der Auswirkungen (oder des Schadens).",
      "c": "KORREKT – Wie beschrieben im CTFL Lehrplan 2018, Abschnitt 5.5.1",
      "d": "FALSCH – Das Risiko wird bestimmt, indem eine Kombination aus Wahrscheinlichkeit und Auswirkung berücksichtigt wird. Diese Definition berücksichtigt nur Gefahren und Verluste (eine Gefahr ist ein schlechtes Ereignis wie ein Risiko, während ein Verlust eine Form der Auswirkung ist), ohne die Wahrscheinlichkeit zu berücksichtigen."
    }
  },
  {
    "frage": "Welcher der folgenden Aussagen ist AM EHESTEN ein Beispiel für ein Produktrisiko?",
    "antworten": {
      "a": "Die erwarteten IT-Sicherheitsmerkmale werden von der Systemarchitektur möglicherweise nicht unterstützt.",
      "b": "Die Entwickler haben möglicherweise nicht die Zeit, alle vom Testteam gefundenen Fehler zu beheben.",
      "c": "Die Testfälle decken die spezifizierten Anforderungen möglicherweise nicht vollständig ab.",
      "d": "Die Umgebung für den Performanztest ist möglicherweise nicht einsatzbereit, bevor das System zur Auslieferung ansteht."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Werden die erwarteten IT-Sicherheitsmerkmale von der Systemarchitektur nicht unterstützt, kann das System schwerwiegende Fehler aufweisen. Da hier das zu produzierende System das Problem ist, handelt es sich um ein Produktrisiko.",
      "b": "FALSCH – Wenn die Entwickler das Budget überschreiten oder die Zeit knapp wird, ist das ein Problem mit dem Projektablauf - es ist ein Projektrisiko.",
      "c": "FALSCH – Wenn die Testfälle die Anforderungen nicht vollständig überdecken, bedeutet dies, dass die Prüfung möglicherweise nicht die Anforderungen des Testkonzepts erfüllt - es ist ein Projektrisiko.",
      "d": "FALSCH – Wenn die Testumgebung nicht einsatzbereit ist, bedeutet dies, dass der Test möglicherweise nicht durchgeführt werden kann, oder dass er auf einer anderen Umgebung durchgeführt werden muss, und dass er sich auf die Durchführung des Projekts auswirkt - es ist ein Projektrisiko."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen zum Zusammenhang von Produktrisiko und Testmanagement ist am wenigsten sinnvoll?",
    "antworten": {
      "a": "Die potenziellen Auswirkungen von IT-Sicherheitsmängeln wurden als besonders hoch eingestuft, so dass IT-Sicherheitstests vor einigen anderen Testaktivitäten priorisiert wurden.",
      "b": "Die Tests haben ergeben, dass die Qualität des Netzwerkmoduls besser ist als erwartet, so dass nun zusätzliche Tests in diesem Bereich durchgeführt werden.",
      "c": "Die Benutzer hatten Probleme mit der Benutzeroberfläche des bisherigen Systems, so dass zusätzliche Usability-Tests für das Ersatzsystem geplant sind.",
      "d": "Die Zeit, die zum Laden von Webseiten benötigt wird, ist entscheidend für den Erfolg der neuen Website, weshalb für dieses Projekt ein Experte für Leistungstests eingesetzt wurde."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Da uns gesagt wird, dass Sicherheitsmängel eine besonders hohe Auswirkung haben, wird ihr Risiko höher sein. Deshalb wurde der Sicherheitstest vor einigen anderen Tests priorisiert. Der Einfluss der Produktrisikoanalyse auf den Test wurde somit KORREKT eingeschätzt.",
      "b": "KORREKT – Da im Netzwerkmodul weniger Fehler als erwartet festgestellt wurden, sollte das wahrgenommene Risiko in diesem Bereich geringer sein, und daher sollten sich WENIGER Tests auf diesen Bereich konzentrieren und NICHT zusätzliche Tests. Daher hat die Produktrisikoanalyse den Test in dieser Situation NICHT KORREKT beeinflusst.",
      "c": "FALSCH – Da die Anwender Probleme mit der Benutzeroberfläche des bisherigen Systems hatten, ist das Risiko der Benutzeroberfläche inzwischen sehr hoch, was dazu geführt hat, dass weitere Usability-Tests geplant sind. Der Einfluss der Produktrisikoanalyse auf den Test wurde somit KORREKT eingeschätzt. Daher hat die Produktrisikoanalyse den Umfang der Tests RICHTIG beeinflusst.",
      "d": "FALSCH – Da die Zeit, die zum Laden von Webseiten benötigt wird, als entscheidend für den Erfolg der neuen Website eingestuft wurde, sollte die Leistung der Website als Risiko angesehen werden, und die Beschäftigung eines Experten für Leistungstests hilft, dieses Risiko zu minimieren. Somit hat die Produktrisikoanalyse den Test RICHTIG beeinflusst."
    }
  },
  {
    "frage": "Welcher der folgenden Punkte wird AM WAHRSCHEINLICHSTEN als Grund für die Verwendung eines Pilotprojekts zur Einführung eines Werkzeugs in einem Unternehmen verwendet?",
    "antworten": {
      "a": "Die Notwendigkeit zu bewerten, wie das Werkzeug zu bestehenden Prozessen und Vorgehensweisen passt und zu bestimmen, was geändert werden muss.",
      "b": "Die Notwendigkeit, die Fähigkeiten zur Testautomatisierung sowie die Trainings-, Mentoring- und Coaching-Bedürfnisse der Tester zu bewerten, die das Werkzeug nutzen werden.",
      "c": "Die Notwendigkeit zu bewerten, ob das Werkzeug die erforderliche Funktionalität bietet und bestehende Testwerkzeuge nicht dupliziert.",
      "d": "Die Notwendigkeit, den Werkzeughersteller zu bewerten in Bezug auf die Schulung und andere Unterstützung, die er anbietet."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Gemäß Lehrplan (6.2.2).",
      "b": "FALSCH – Die Bewertung der Fähigkeiten zur Testautomatisierung und der Trainings-, Mentoring- und Coaching-Bedürfnisse der Tester, die das Tool verwenden werden, hätte im Rahmen der Werkzeugauswahl gemäß Lehrplan (6.2.1) durchgeführt werden sollen.",
      "c": "FALSCH – Die Entscheidung, ob das Werkzeug die erforderliche Funktionalität bietet und bestehende Werkzeuge nicht dupliziert, hätte im Rahmen der Werkzeugauswahl gemäß Lehrplan (6.2.1) getroffen werden sollen.",
      "d": "FALSCH – Die Bewertung des Werkzeugherstellers im Hinblick auf die Schulung und andere Unterstützung, die er anbietet, hätte im Rahmen der Werkzeugauswahl gemäß Lehrplan (6.2.1) durchgeführt werden sollen."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen beschreibt den Unterschied zwischen Testen und Debugging zutreffend?",
    "antworten": {
      "a": "Testen identifiziert die Ursache von Fehlerzuständen. Debugging analysiert die Fehlerzustände und schlägt Präventionsmaßnahmen vor.",
      "b": "Dynamische Tests zeigen Fehlerwirkungen auf, die durch Fehlerzustände verursacht wurden. Debugging ist eine Entwicklungsaktivität, die Fehlerzustände beseitigt, die die Ursache von Fehlerwirkungen sind.",
      "c": "Testen entfernt Fehlerwirkungen; Debugging entfernt dagegen Fehlerzustände, die Fehlerwirkungen verursachen.",
      "d": "Dynamische Tests verhindern die Ursache von Fehlerwirkungen. Debugging entfernt die Fehlerwirkungen."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Durch Testen können nicht die Ursachen von Fehlerwirkungen identifiziert werden, sondern nur durch Debugging (siehe CTFL CORE Lehrplan 2018, Abschnitt 1.1.2).",
      "b": "KORREKT – Dynamisches Testen zeigt Fehlerwirkungen auf, die durch Fehlerzustände verursacht wurden. Durch Debugging können die Ursachen von Fehlerwirkungen analysiert und beseitigt werden (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.1.2).",
      "c": "FALSCH – Durch Testen werden keine Fehlerzustände und daraus folgende Fehlerwirkungen entfernt, sondern nur durch Debugging (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.1.2).",
      "d": "FALSCH – Durch dynamische Tests können die Ursachen von Fehlerwirkungen (d. h. Fehlerzustände) nicht verhindert werden, sondern nur das Vorhandensein von Fehlerzuständen, die Fehlerwirkungen hervorrufen, nachgewiesen werden. (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.1.2 und Abschnitt 1.3; 1. Grundsatz)."
    }
  },
  {
    "frage": "Nachfolgend finden Sie eine Liste von Problemen, die während des Testens oder im Betrieb beobachtet werden können. Welches Problem ist eine Fehlerwirkung?",
    "antworten": {
      "a": "Das Produkt stürzte ab, als der Benutzer eine Option in einer Dialogbox auswählte.",
      "b": "Eine kompilierte Quellcodedatei wurde in der falschen Version zum Build hinzugefügt.",
      "c": "Der Berechnungsalgorithmus verwendet die falschen Eingangsvariablen.",
      "d": "Der Entwickler hat die Anforderungen an den Algorithmus falsch interpretiert."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Eine Fehlerwirkung ist das Sichtbarwerden eines Fehlerzustands während der Ausführung. Ein Absturz ist vom Anwender deutlich spürbar (siehe CTFL Lehrplan CORE 2018; Abschnitt 1.2.3)",
      "b": "FALSCH – Diese Art von Fehlern (Fehlhandlungen) wird nicht unbedingt zu einer sichtbaren oder spürbaren Fehlerwirkung führen; zum Beispiel, wenn die Änderungen in der neuen Version der Quelldatei nur in den Kommentaren vorgenommen wurden. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.2.3)",
      "c": "FALSCH – Es handelt sich um einen Fehlerzustand, nicht um eine Fehlerwirkung. Verwendung von falschen Eingabevariablen wird nicht unbedingt zu einer sichtbaren oder spürbaren Fehlerwirkung führen; zum Beispiel, wenn niemand diesen speziellen Algorithmus verwendet; oder wenn die falsche Eingabevariable einen ähnlichen Wert wie die richtige Eingabevariable hat; oder wenn das FALSCHE Resultat des Algorithmus nicht verwendet wird. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.2.3)",
      "d": "FALSCH – Es handelt sich um eine Fehlhandlung, nicht um eine Fehlerwirkung. Diese Art von Fehlern wird nicht notwendigerweise zu einer Fehlerwirkung führen; zum Beispiel, wenn niemand diesen speziellen Algorithmus verwendet. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.2.3)"
    }
  },
  {
    "frage": "Ein Tester hat über einen Zeitraum von 5 Jahren Software-Applikationen auf mobilen Geräten einem Test unterzogen. Er hat sich einen großen Erfahrungsschatz im Testen von mobilen Applikationen angeeignet und erzielt in kürzer Zeit bessere Ergebnisse als andere. Über einen längeren Zeitraum hat der Tester die existierenden automatisierten Testfälle nicht modifiziert und auch keine neuen Testfälle mehr erstellt. Dies führt dazu, dass durch Ausführung der Tests immer weniger Fehler gefunden werden. Welchen Grundsatz des Softwaretestens hat der Tester nicht beachtet?",
    "antworten": {
      "a": "Testen ist abhängig vom Umfeld",
      "b": "Vollständiges Testen ist nicht möglich",
      "c": "Wiederholungen haben keine Wirksamkeit",
      "d": "Häufung von Fehlerzuständen"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Test ist abhängig vom Umfeld, egal, ob manuell oder automatisiert (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.3; 6. Grundsatz), führt aber nicht dazu, dass - wie oben beschrieben - immer weniger Fehler aufgedeckt werden.",
      "b": "FALSCH – Erschöpfendes vollständiges Testen ist unmöglich, egal wie viel Aufwand wir in den Test investieren (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.3; 2. Grundsatz), führt aber nicht dazu, dass - wie oben beschrieben - immer weniger Fehler aufgedeckt werden.",
      "c": "KORREKT – Ein Grundsatz (gem. CTFL CORE Lehrplan 2018) besagt: “Vorsicht vor dem Pestizid-Paradoxon“ bzw. Wiederholungen haben keine Wirksamkeit (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.3; 5. Grundsatz), dass eine Ausführung immer der gleichen Testfälle keine neuen Erkenntnisse mehr bringt. Um neue Fehlerzustände zu finden, müssen bestehende Tests möglicherweise verändert werden und neue Tests erstellt werden.",
      "d": "FALSCH – Oftmals ist eine “Häufung von Fehlerzuständen“ (CTFL CORE Lehrplan 2018; Abschnitt 1.3; 4. Grundsatz) in einer kleinen Anzahl von Modulen zu beobachten; das führt aber nicht dazu, dass - wie oben beschrieben - immer weniger Fehler aufgedeckt werden."
    }
  },
  {
    "frage": "Inwiefern leistet das Testen einen Beitrag zur Verbesserung von Qualität?",
    "antworten": {
      "a": "Testen stellt sicher, dass Anforderungen detailliert genug sind.",
      "b": "Testen verringert das Risiko von unzureichender Softwarequalität.",
      "c": "Testen stellt sicher, dass in der Organisation Standards befolgt werden.",
      "d": "Testen misst die Softwarequalität im Hinblick auf die Anzahl ausgeführter Testfälle."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Durch statisches Testen (Reviews) kann dazu beigetragen werden, aber es kann nicht sichergestellt werden, dass die Anforderungen detailliert genug sind. (vgl. CTFL Lehrplan 2018; Abschnitt 1.2.2).",
      "b": "KORREKT – Testen deckt Fehlerwirkungen und Fehlerzustände auf und verringert damit das Risiko von unzureichender Softwarequalität (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.1.1).",
      "c": "FALSCH – Dies ist Qualitätssicherung, aber nicht Testen (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.2.2).",
      "d": "FALSCH – Die Qualität kann nicht anhand der Anzahl ausgeführter Testfälle gemessen werden, ohne dass man das Ergebnis kennt (vgl. CTFL CORE Lehrplan 2018; Abschnitt 1.2.2)."
    }
  },
  {
    "frage": "Welche der folgenden Aktivitäten ist Teil der Hauptaktivität „Testanalyse“ im Testprozess?",
    "antworten": {
      "a": "Identifikation der erforderlichen Infrastruktur und Werkzeuge",
      "b": "Erstellen von Testsuiten basierend auf den Testskripten",
      "c": "Analyse der „Lessons learned“ zur Prozessverbesserung",
      "d": "Bewerten der Testbasis hinsichtlich Testbarkeit"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – diese Aktivität wird im “Testentwurf” durchgeführt (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.4.2; Testentwurf).",
      "b": "FALSCH – diese Aktivität wird in der “Testrealisierung” durchgeführt (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.4.2; Testrealisierung).",
      "c": "FALSCH – diese Aktivität wird im “Testabschluss“ durchgeführt (siehe CTFL CORE Lehrplan 2018; Abschnitt 1.4.2; Testabschluss).",
      "d": "KORREKT – diese Aktivität wird in der „Testanalyse“ durchgeführt (CTFL CORE Lehrplan 2018; Abschnitt 1.4.2: „Während der Testanalyse wird die Testbasis analysiert, um testbare Features zu identifizieren …“)."
    }
  },
  {
    "frage": "Wie kann der White-Box-Test während des Abnahmetests angewendet werden?",
    "antworten": {
      "a": "Um zu prüfen, ob große Datenmengen zwischen integrierten Systemen übertragen werden können.",
      "b": "Um zu prüfen, ob alle Code-Anweisungen und Code-Entscheidungspfade ausgeführt wurden.",
      "c": "Um zu prüfen, ob alle Abläufe der Arbeitsprozesse abgedeckt sind.",
      "d": "Um alle Webseiten-Navigationen abzudecken."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Relevant für Integrationstests. (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.2.2)",
      "b": "FALSCH – Relevant für Komponententests (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.2.1 und 2.3.5, Beispiele für White-Box-Tests)",
      "c": "KORREKT – CTFL CORE Lehrplan 2018, Abschnitt 2.3.5: Für Abnahmetests sind die Tests so konzipiert, dass sie z. B. alle Dateistrukturen und Wertebereiche der Finanzdaten für Bank-zu-Bank-Überweisungen unterstützen.",
      "d": "FALSCH – Relevant für Systemtests (vgl. CTFL CORE Lehrplan 2018; Abschnitt 2.2.3, Beispiele für White-Box-Tests)"
    }
  },
  {
    "frage": "Welche der folgenden Aussagen zum Vergleich zwischen Komponententest und Systemtest ist WAHR?",
    "antworten": {
      "a": "Komponententests überprüfen die Funktion von Komponenten, Programmobjekten und Klassen, die separat prüfbar sind, während Systemtests die Schnittstellen zwischen den Komponenten und Wechselwirkungen mit anderen Teilen des Systems überprüfen.",
      "b": "Testfälle für den Komponententest werden in der Regel von Komponentenspezifikationen, Designspezifikationen oder Datenmodellen abgeleitet, während Testfälle für den Systemtest in der Regel von Anforderungsspezifikationen oder Anwendungsfällen abgeleitet werden.",
      "c": "Komponententests konzentrieren sich nur auf die funktionalen Eigenschaften, während Systemtests sich auf die funktionalen und nicht-funktionalen Eigenschaften konzentrieren.",
      "d": "Komponententests sind in der Verantwortung der Tester, während die Systemtests in der Regel in der Verantwortung der Benutzer des Systems liegen."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Systemtests testen nicht die Schnittstellen und Wechselwirkungen zwischen den Komponenten und anderen Teilen des Systems; das ist Ziel von Integrationstests (siehe CTFL CORE Lehrplan 2018, Abschnitt 2.2.2).",
      "b": "KORREKT – (siehe CTFL CORE Lehrplan 2018, Abschnitt 2.2.1 (Komponententest): Beispiele für Arbeitsprodukte, die als Testbasis für Komponententests verwendet werden können, umfassen: detailliertes Design, Code, Datenmodell, Komponentenspezifikationen. CTFL CORE Lehrplan 2018; Abschnitt. 2.2.3: Beispiele für Arbeitsprodukte für Systemtests umfassen: System- und Softwareanforderungsspezifikationen (funktional und nicht funktionale), Anwendungsfälle.",
      "c": "FALSCH – Komponententests konzentrieren sich nicht nur auf funktionale, sondern auch auf nicht-funktionale Aspekte (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.2.1, Komponententest).",
      "d": "FALSCH – Komponententests werden auch von Entwicklern durchgeführt, wohin gegen sich (unabhängige) Tester mit Systemtests befassen (vgl. CTFL CORE Lehrplan 2018, Unterkapitel 2.2.1 und 2.2.3, jeweils Abschnitt „Spezifische Ansätze und Verantwortlichkeiten“)."
    }
  },
  {
    "frage": "Welche der folgenden Aussagen ist zutreffend?",
    "antworten": {
      "a": "Der Zweck des Regressionstests ist es, zu überprüfen, ob die Korrektur erfolgreich implementiert wurde, während der Zweck der Fehlernachtests darin besteht, zu bestätigen, dass die Korrektur keine Seiteneffekte hat.",
      "b": "Der Zweck des Regressionstests ist es, unbeabsichtigte Seiteneffekte zu erkennen, während der Zweck des Fehlernachtests darin besteht zu prüfen, ob das System in einer neuen Umgebung noch funktioniert.",
      "c": "Der Zweck des Regressionstests ist es, unbeabsichtigte Seiteneffekte zu erkennen, während der Zweck des Fehlernachtests darin besteht zu prüfen, ob der ursprüngliche Fehlerzustand behoben wurde.",
      "d": "Der Zweck des Regressionstests ist es zu prüfen, ob die neue Funktionalität funktioniert, während der Zweck des Fehlernachtests darin besteht zu prüfen, ob der ursprüngliche Fehlerzustand behoben wurde."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Regressionstests überprüfen nicht die erfolgreiche Implementierung einer Korrektur und Fehlernachtest prüfen nicht auf Seiteneffekte. (siehe CTFL CORE Lehrplan, Abschnitt 2.3.4).",
      "b": "FALSCH – Die Aussage über Fehlernachtests sollte sich auf Regressionstests beziehen (siehe CTFL CORE Lehrplan 2018, Abschnitt 2.3.4).",
      "c": "KORREKT – CTFL CORE Lehrplan 2018, Abschnitt 2.3.4.",
      "d": "FALSCH – Test neuer Funktionalität ist nicht Bestandteil eines Regressionstests (siehe CTFL CORE Lehrplan 2018, Abschnitt 2.4 im Vergleich zu Abschnitt. 2.3.4 für Regressionstests)."
    }
  },
  {
    "frage": "Welches ist die BESTE Definition eines inkrementellen Entwicklungsmodells?",
    "antworten": {
      "a": "Die Definition der Anforderungen, das Design der Software und das Testen erfolgen in einer Serie durch Hinzufügen von Teilen.",
      "b": "Eine Phase des Entwicklungsprozesses sollte beginnen, wenn die vorhergehende Phase abgeschlossen ist.",
      "c": "Das Testen wird als separate Phase betrachtet. Sie startet, wenn die Entwicklung abgeschlossen ist.",
      "d": "Das Testen wird der Entwicklung als Inkrement hinzugefügt."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.1.1 (9. Absatz): Bei der inkrementellen Entwicklung geht es um die Festlegung von Anforderungen, Entwurf, Entwicklung und Test eines Systems in Teilen.",
      "b": "FALSCH – Dieses ist ein sequenzielles Modell (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.1.1).",
      "c": "FALSCH – Dies beschreibt das Wasserfall-Modell (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.1.1).",
      "d": "FALSCH – Das Testen für sich ist kein Inkrement/zusätzliche Stufe in der Entwicklung, sondern während der Entwicklung gibt es Inkremente (vgl. CTFL CORE Lehrplan 2018, Abschnitt 2.1.1)."
    }
  },
  {
    "frage": "Welcher der folgenden Entscheidungen sollte KEIN Auslöser für Wartungstests sein?",
    "antworten": {
      "a": "Die Entscheidung, die Wartbarkeit der Software zu testen",
      "b": "Die Entscheidung, das System nach der Migration auf einer neuen Betriebsplattform zu testen",
      "c": "Die Entscheidung zu testen, ob archivierte Daten abgerufen werden können",
      "d": "Die Entscheidung zum Testen nach 'Hot Fixes'"
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – Dies ist ein Wartbarkeitstest und nicht ein Wartungstest. „... die meisten Wartbarkeitsfehler (können) nur durch statische Tests gefunden werden.“ (CTFL CORE Lehrplan 2018, Kap. 3.1.3, letzter Absatz)",
      "b": "FALSCH – Dies ist ein Auslöser für Wartungstests, siehe CTFL CORE Lehrplan 2018, Kapitel 2.4.1: Betriebstests der neuen Umgebung, sowie der geänderten Software.",
      "c": "FALSCH – Dies ist ein Auslöser für Wartungstests, siehe CTFL CORE Lehrplan 2018, Kapitel 2.4.1, 3. Absatz: Testen von Wiederherstellungsprozeduren und Rückholprozeduren nach der Archivierung mit langen Aufbewahrungszeiten.",
      "d": "FALSCH – Dies ist ein Auslöser für Wartungstests, siehe CTFL CORE Lehrplan 2018, Kapitel 2.4, 2. Absatz, und Kap. 2.4.1: Reaktive Modifikation eines ausgelieferten Softwareproduktes zur Behebung von dringenden Fehlerzuständen, die zu tatsächlichen Fehlerwirkungen geführt haben."
    }
  },
  {
    "frage": "Welche der folgenden Optionen sind Rollen in einem formalen Review?",
    "antworten": {
      "a": "Entwickler, (Review-)Moderator, Reviewleiter, Gutachter, Tester",
      "b": "Autor, (Review-)Moderator, Manager, Gutachter, Entwickler",
      "c": "Autor, Manager, Reviewleiter, Gutachter, Designer",
      "d": "Autor, (Review-)Moderator, Reviewleiter, Gutachter, Protokollant"
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Tester und Entwickler sind KEINE Rollen im formalen Review gemäß CTFL CORE Lehrplan 2018, Kapitel 3.2.2.",
      "b": "FALSCH – Entwickler ist KEINE Rolle im formalen Review gemäß CTFL CORE Lehrplan 2018, Kapitel 3.2.2.",
      "c": "FALSCH – Designer ist KEINE Rolle im formalen Review gemäß CTFL CORE Lehrplan 2018, Kapitel 3.2.2.",
      "d": "KORREKT – siehe CTFL CORE Lehrplan 2018, Kapitel 3.2.2."
    }
  },
  {
    "frage": "Welche Aktivitäten werden im Rahmen der Planung eines formalen Reviews durchgeführt?",
    "antworten": {
      "a": "Sammeln von Metriken für die Bewertung der Effektivität des Reviews.",
      "b": "Beantwortung von Fragen, die die Teilnehmer haben könnten.",
      "c": "Definition und Prüfung der Erfüllung von Eingangskriterien für das Review.",
      "d": "Bewertung der Reviewbefunde gegenüber den Endekriterien."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Das Sammeln von Metriken ist der Hauptaktivität „Fehlerbehebung und Bericht“ zugeordnet. (vgl. CTFL CORE Lehrplan 2018, Abschnitt. 3.2.1);",
      "b": "FALSCH – Die Beantwortung von Fragen ist der Hauptaktivität „Reviewbeginn“ (Initiierung eines Reviews, KICKOFF) zugeordnet (vgl. CTFL CORE Lehrplan 2018, Abschnitt. 3.2.1);",
      "c": "KORREKT – Sowohl die Definition als auch die Prüfung von Eingangskriterien erfolgt in der „Planung“ eines formalen Reviews (vgl. CTFL CORE Lehrplan 2018, Abschnitt. 3.2.1);",
      "d": "FALSCH – Die Bewertung der Reviewbefunde gegenüber den Endekriterien ist der Hauptaktivität „Befundkommunikation und -analyse“ zugeordnet (vgl. CTFL CORE Lehrplan 2018, Abschnitt. 3.2.1);"
    }
  },
  {
    "frage": "Welche der unten aufgeführten Reviewarten ist AM BESTEN geeignet, wenn das Review gemäß einem formalen bzw. definierten Prozess mit Regeln und unter Verwendung von Checklisten durchgeführt werden soll?",
    "antworten": {
      "a": "Informelles Review",
      "b": "Technisches Review",
      "c": "Inspektion",
      "d": "Walkthrough"
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – ein informelles Review verwendet keinen formalen Prozess (siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.3, 3. Absatz)",
      "b": "FALSCH – die Verwendung von Checklisten ist optional (siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.3, 5. Absatz)",
      "c": "KORREKT – Inspektion ist ein definierter Prozess mit Regeln und Checklisten (siehe CTFL CORE Lehrplan 2018; Abschnitt 3.2.3, 6. Absatz)",
      "d": "FALSCH – erfordert nicht immer einen formalen Prozess und die Verwendung von Checklisten ist optional (siehe CTFL CORE Lehrplan 2018, Abschnitt 3.2.3, 4. Absatz)"
    }
  },
  {
    "frage": "Welche der folgenden Aussagen zum statischen Test ist am EHESTEN zutreffend?",
    "antworten": {
      "a": "Statischer Test ist eine kostengünstige Möglichkeit, Fehlerzustände zu erkennen und zu beheben.",
      "b": "Statischer Test macht den dynamischen Test theoretisch überflüssig.",
      "c": "Statischer Test ermöglicht, Laufzeitprobleme frühzeitig im Lebenszyklus zu erkennen.",
      "d": "Bei der Prüfung sicherheitskritischer Systeme hat der statische Test einen geringen Stellenwert, da der dynamische Test den Fehlerzustand besser findet."
    },
    "korrekteAntwort": "a",
    "feedback": {
      "a": "KORREKT – CTFL CORE Lehrplan 2018; Abschnitt 3.1.2, 3. Satz: Früh entdeckte Fehlerzustände sind oft viel kostengünstiger zu beheben als Fehlerzustände, die später im Lebenszyklus erkannt werden.",
      "b": "FALSCH – Dynamische Tests haben ihre Berechtigung, da sie andere Fehlerarten finden als statische Tests (vgl. CTFL CORE Lehrplan 2018; Abschnitt 3.1.3, 1. Absatz).",
      "c": "FALSCH – Dies geschieht beim dynamischen Testen (siehe Glossar V.3.2).",
      "d": "FALSCH – Statischer Test ist wichtig für sicherheitskritische Computersysteme (vgl. CTFL CORE Lehrplan 2018; Abschnitt 3.1, 2. Absatz)."
    }
  },
  {
    "frage": "Sie werden zum Review eingeladen. Das zu prüfende Arbeitsergebnis ist eine Beschreibung des firmeninternen Dokumentenerstellungsprozesses. Ziel der Beschreibung ist die für alle zweifelsfrei nachvollziehbare Darstellung der Arbeitsteilung zwischen den verschiedenen am Prozess beteiligten Rollen. Sie werden zum checklistenbasierten Review eingeladen. Die Checkliste wird Ihnen ebenfalls zugeschickt. Sie umfasst die folgenden Punkte: i. Wird für jede Tätigkeit der Ausführende klar benannt? ii. Ist für jede Tätigkeit das Eingangskriterium klar definiert? iii. Ist für jede Tätigkeit das Endekriterium klar definiert? iv. Sind für jede Tätigkeit die zuarbeitenden Rollen und ihr Arbeitsumfang klar definiert? Im Folgenden zeigen wir einen Ausschnitt des zu prüfenden Arbeitsergebnisses, zu dessen Review Sie die obige Checkliste anwenden sollen: „Nach Prüfung der Kundendokumentation auf Vollständigkeit und Korrektheit erstellt der Softwarearchitekt die Systemspezifikation. Nachdem der Softwarearchitekt die Systemspezifikation fertiggestellt hat, lädt er Tester zum Review ein. Eine bereitgestellte Checkliste beschreibt den Umfang des Reviews. Jeder eingeladene Gutachter erstellt – sofern notwendig – Reviewkommentare und schließt das Review mit einem offiziellen Review-done-Kommentar ab.“ Welcher der folgenden Aussagen zu Ihrem Review ist korrekt?",
    "antworten": {
      "a": "Punkt ii) der Checkliste wurde verletzt, da nicht klar ist, welche Bedingung erfüllt sein muss, damit zum Review eingeladen werden kann.",
      "b": "Ihnen fällt auf, dass neben dem Tester auch ein Experte für Validierung eingeladen werden muss. Da dieser Punkt aber nicht Bestandteil Ihrer Checkliste ist, erstellen Sie keinen entsprechenden Kommentar.",
      "c": "Punkt iii) der Checkliste wurde verletzt, da nicht klar ist, wodurch das Review als abgeschlossen gekennzeichnet ist.",
      "d": "Punkt i) der Checkliste wurde verletzt, da nicht klar ist, wer die Checkliste für die Einladung zum Review bereitstellt."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – es ist beschrieben, dass der Architekt die Systemspezifikation fertiggestellt haben muss.",
      "b": "FALSCH – siehe CTFL CORE Lehrplan, Abschnitt 3.2.4, „Checklistenbasiert“: im letzten Satz des Absatzes steht, dass auch auf Punkte außerhalb der Checkliste geachtet werden muss.",
      "c": "FALSCH – es ist beschrieben: jeder Gutachter hat seinen Review-done-Kommentar erstellt.",
      "d": "KORREKT – es ist beschrieben: „Eine bereitgestellte Checkliste“ … aber wer stellt sie bereit?"
    }
  },
  {
    "frage": "Was ist checklistenbasiertes Testen?",
    "antworten": {
      "a": "Ein Testverfahren, bei dem Testfälle auf Basis des Wissens der Tester über frühere Fehler oder aus allgemeinem Wissen über Fehlerwirkungen abgeleitet werden.",
      "b": "Ein Testverfahren, das auf einer Analyse der Spezifikation einer Komponente oder eines Systems basiert.",
      "c": "Ein erfahrungsbasiertes Testverfahren, bei dem der erfahrene Tester z. B. eine Liste von Kontrollpunkten nutzt, welche beachtet, überprüft oder in Erinnerung gerufen werden müssen.",
      "d": "Ein Testansatz, bei dem die Tester dynamisch Tests entwerfen und durchführen, basierend auf ihrem Wissen, der Erkundung des Testelements und dem Ergebnis früherer Tests."
    },
    "korrekteAntwort": "c",
    "feedback": {
      "a": "FALSCH – Das ist die Definition für intuitive Testfallermittlung, siehe Glossar V.3.3.",
      "b": "FALSCH – Das ist die Definition für Black-Box-Testverfahren, siehe Glossar V.3.3.",
      "c": "KORREKT – siehe Glossar 3.3.",
      "d": "FALSCH – Das ist (bis auf die Erwähnung des Testers) die Definition für exploratives Testen, siehe Glossar V.3.3."
    }
  },
  {
    "frage": "Welches der folgenden Verfahren kann der Kategorie Black-Box-Testverfahren zugeordnet werden?",
    "antworten": {
      "a": "Verfahren, das auf der Analyse der Architektur basiert.",
      "b": "Verfahren, das prüft, ob das Testobjekt entsprechend dem Feinentwurf umgesetzt ist.",
      "c": "Verfahren, das auf dem Wissen über frühere Fehler oder dem allgemeinen Wissen über Fehler basiert.",
      "d": "Verfahren, das z. B. auf formalen Anforderungsdokumenten basiert."
    },
    "korrekteAntwort": "d",
    "feedback": {
      "a": "FALSCH – Dies bezieht sich auf White-Box-Testverfahren. (vgl. CTFL CORE Lehrplan 2018, 4.1.2, 3. Absatz)",
      "b": "FALSCH – Dies bezieht sich auf White-Box-Testverfahren. (vgl. CTFL CORE Lehrplan 2018; Abschnitte 4.1.2, 3. Absatz)",
      "c": "FALSCH – Dies bezieht sich auf erfahrungsbasierte Testverfahren. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 4.4)",
      "d": "KORREKT – CTFL CORE Lehrplan 2018; Abschnitt 4.1.2, 2. Absatz: Black-Box-Testverfahren basieren auf einer Analyse der zugehörigen Testbasis (z. B. formale Anforderungsdokumente, Spezifikationen, Anwendungsfälle, User-Stories)."
    }
  },
  {
    "frage": "Die folgende Aussage bezieht sich auf Entscheidungsüberdeckung: \"Wenn der Code nur aus einer einzigen IF-Anweisung (also keinen Schleifen oder CASE-Anweisungen) besteht und auch sonst durch den Test nicht geschachtelt aufgerufen wird, dann wird bei einem einzelnen Testfall, der ausgeführt wird, eine Entscheidungsüberdeckung von 50% erreicht.\" Welcher der folgenden Aussagen ist zutreffend?",
    "antworten": {
      "a": "Die Aussage ist wahr. Ein einzelner Testfall erzielt eine 100% Anweisungsüberdeckung und daher 50% Entscheidungsüberdeckung.",
      "b": "Die Aussage ist wahr. Bei einem einzelnen Testfall ist der Entscheidungsausgang der IF-Anweisung entweder wahr oder falsch.",
      "c": "Die Aussage ist falsch. Ein einzelner Testfall kann in diesem Fall nur eine Entscheidungsüberdeckung von 25% garantieren.",
      "d": "Die Aussage ist falsch. Die Aussage ist zu weit gefasst. Sie kann abhängig von der getesteten Software richtig sein oder nicht."
    },
    "korrekteAntwort": "b",
    "feedback": {
      "a": "FALSCH – Während die gemachte Aussage wahr ist, ist die Erklärung falsch; weil die Beziehung zwischen Anweisungsüberdeckung und Entscheidungsüberdeckung falsch dargestellt ist. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 4.3.3)",
      "b": "KORREKT – Da jeder Testfall dazu führt, dass das Ergebnis der IF-Anweisung entweder WAHR oder FALSCH ist, haben wir definitiv 50% Entscheidungsüberdeckung erreicht. (vgl. CTFL CORE Lehrplan 2018; Abschnitt 4.3.2, 2. Absatz)",
      "c": "FALSCH – Ein einzelner Testfall kann mehr als 25% Entscheidungsüberdeckung erreichen; bei der obigen Aussage sind es 50% Entscheidungsüberdeckung (vgl. Begründung zu Antwort b)",
      "d": "FALSCH – Die obige Aussage ist konkret und immer wahr; weil durch jeden einzelnen Testfall immer eine Entscheidungsüberdeckung von 50% erreicht wird. (vgl. Begründung zu Antwort b)"
    }
  }
]